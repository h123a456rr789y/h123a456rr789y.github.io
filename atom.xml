<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Harry&#39;s Stories</title>
  
  <subtitle>Adventurer</subtitle>
  <link href="https://h123a456rr789y.github.io/atom.xml" rel="self"/>
  
  <link href="https://h123a456rr789y.github.io/"/>
  <updated>2022-08-11T10:03:00.890Z</updated>
  <id>https://h123a456rr789y.github.io/</id>
  
  <author>
    <name>Harry Hong</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>智慧線上監考系統 Online Exam Proctoring with AI</title>
    <link href="https://h123a456rr789y.github.io/2021/05/31/%E6%99%BA%E6%85%A7%E7%B7%9A%E4%B8%8A%E7%9B%A3%E8%80%83%E7%B3%BB%E7%B5%B1-Online-Exam-Proctoring-with-AI/"/>
    <id>https://h123a456rr789y.github.io/2021/05/31/%E6%99%BA%E6%85%A7%E7%B7%9A%E4%B8%8A%E7%9B%A3%E8%80%83%E7%B3%BB%E7%B5%B1-Online-Exam-Proctoring-with-AI/</id>
    <published>2021-05-31T15:25:46.000Z</published>
    <updated>2022-08-11T10:03:00.890Z</updated>
    
    <content type="html"><![CDATA[<h1 id="智慧線上監考系統-Online-Exam-Proctoring-with-AI"><a href="#智慧線上監考系統-Online-Exam-Proctoring-with-AI" class="headerlink" title="智慧線上監考系統 Online Exam Proctoring with AI"></a>智慧線上監考系統 Online Exam Proctoring with AI</h1><h1 id="簡介"><a href="#簡介" class="headerlink" title="簡介"></a>簡介</h1><p>智慧線上監考系統就是一個讓遠方有人可以監考你考試確保考生考試沒有作弊的一個機制</p><p><img src="https://i.imgur.com/4rotLYS.png"></p><ul><li>Photo by Rachel Sender</li></ul><p>其實它早就存在約10年左右，一開始，他是使用最簡單的方式只建造一個網路的平台讓監考者可以遠端來看受試者考試，所以純脆只是提供一個平台（由真人監控），後來隨著機器學習還有深度學習方法不斷的演進，一些AI的方法逐漸用來協助判斷是否學生有不正常的動作和作弊的嫌疑（由AI系統監控），此外，因為電腦視覺和聲音識別的技術不斷進步，在偵測學生的的影像和聲音的資訊上有了更好的突破，如果能好好結合兩種不同的監控方法，想必可以給遠距考試更好的監考公平性。</p><p>線上監考系統可以被拿來用在當時題考試沒辦法進行的時候，而且它不僅可以支援線上的考試，也可以支援錄製後的考試，對於跨國的考試來說，錄製的考試會是相對於方便，而線上的考試也可以及時監控考試的狀況，所以不論是空間上或是時間上都給予考試多很大的彈性空間。</p><p>這些系統像是Pearson, ProctorU, Eklavvya, Zoom 等公司有相關的產品，並且很多已經在歐美廣泛的被使用來做遠端考試的監測，但是此行業還是相對算初期，還有很長的路可以走。</p><h1 id="線上智慧監考是如何進行的呢？"><a href="#線上智慧監考是如何進行的呢？" class="headerlink" title="線上智慧監考是如何進行的呢？"></a>線上智慧監考是如何進行的呢？</h1><p><img src="https://i.imgur.com/RvXnQi1.png"></p><p>首先，受試者會先遠端登入到一個安全的網路瀏覽器平台，並且用身份證ID認證受試者的身份，之後就會進行線上的考試，線上的考試會需要存取你電腦的相機還有麥克風，好讓它可以拿到你影像還有聲音的資訊來監考，接著則是會將這些所有的監考資料傳到遠端的伺服器上面進行偵測還有分析的功能，最後在以直播遠端或者是處理後的資料＋影像傳給監考者來看，或者是完全用AI程式系統來判定。</p><h1 id="線上智慧監考跟AI到底有什麼關聯呢？"><a href="#線上智慧監考跟AI到底有什麼關聯呢？" class="headerlink" title="線上智慧監考跟AI到底有什麼關聯呢？"></a>線上智慧監考跟AI到底有什麼關聯呢？</h1><p><img src="https://i.imgur.com/eJ5g9rT.png"><br>它可能涵蓋的任務包含了電腦視覺，像是人臉辨識和多人偵測，此外也提供了偵測可疑物品像是手機或者是平板等考試違禁品和視線追蹤看受試者有沒有亂看其他東西的嫌疑。在語音上面，則是可以偵測是否有其他人在說話在暗中來幫助受試者考試。在電腦的權限允許下，我們也可以對受試者在電腦上的行為來進行分析，像是受試者是否有打開多個網頁或有google查資料的嫌疑，又或者是否有大量複製貼上的嫌疑，也可透過觀察受試者打字的習慣還有韻律來判斷是否是正常或者是有很大的反差。</p><h1 id="相關研究"><a href="#相關研究" class="headerlink" title="相關研究"></a>相關研究</h1><h2 id="Automated-Online-Exam-Proctoring"><a href="#Automated-Online-Exam-Proctoring" class="headerlink" title="Automated Online Exam Proctoring"></a><a href="https://ieeexplore.ieee.org/document/7828141">Automated Online Exam Proctoring</a></h2><p><img src="https://i.imgur.com/Z1PFEfN.png"><br>這個研究算是最早提出來結合傳統演算來得取得特徵在用機器學習的模型來訓練出一個可以用來分類預測的一個模型，在倫文中有提到如何翠取出像是文字辨識（Text Detection,）語音辨識（Speech Detection）,視線預測（Gaze Estimation）,手機偵測（Phone Detection）,使用者認證（User Verification）,執行中視窗偵測（Active Window Detection）等計算的方式，雖然有些方法相對陽春，但是卻是為這個人工智慧監考系統創下了一個好的基底的一篇論文，可以想到的是肯定有很多其他的分析特徵的方式和做分類的模型可以被拿來用來這個系統上，可是因為大部分現有的軟體幾乎都是商業開發的，所以很都細節的方法都沒有被公開出來。</p><h2 id="Online-Student-Authentication-and-Proctoring-System-Based-on-Multimodal-Biometrics-Technology"><a href="#Online-Student-Authentication-and-Proctoring-System-Based-on-Multimodal-Biometrics-Technology" class="headerlink" title="Online Student Authentication and Proctoring System Based on Multimodal Biometrics Technology"></a><a href="https://www.google.com/url?q=https://ieeexplore.ieee.org/abstract/document/9427463&sa=D&source=editors&ust=1622470875162000&usg=AOvVaw3onl4dWLyS2FKRgjDNazMu">Online Student Authentication and Proctoring System Based on Multimodal Biometrics Technology</a></h2><p><img src="https://i.imgur.com/XH5Frql.png"><br>在此篇論文它提出了一個更新（2021年五月）更完整的架構來做線上智慧間考得系統，首先也是讓學生先連上軟體，並且在伺服器端會有一個獨立的軟體供給學生考生安裝並且同時有一個網路的軟體來蒐集學生的影像還有聲音等資訊，接著丟給運算中心（Processing Core）像是影像處裡，音訊處裡，和打字偵測，使用者認證等工作，最後在將所有的結果傳給考試單位。</p><h1 id="智慧線上監考系統真的可以有效的偵測出作弊嘛？"><a href="#智慧線上監考系統真的可以有效的偵測出作弊嘛？" class="headerlink" title="智慧線上監考系統真的可以有效的偵測出作弊嘛？"></a>智慧線上監考系統真的可以有效的偵測出作弊嘛？</h1><p>事實上很多公司都宣稱說他們的系統相較正常的考試來說可以更好的偵測出學生有沒有作弊，這可能是對的但是我其實是相當的懷疑，因為大部分的系統都沒有提供出有公信力的數據來展示出他們的效果，此外學生作弊這件事情也是非常難來量化的。但是就我看來這些結合AI的系統可以有效的輔助助教或者是考官監測學生考試時候的狀況，除了遠距的因素之外，其實很多課堂也會有因為學生人數過多（100, 200人以上的課），都會使監控考試的難度增加，所以這個監測系統其實更主要的是一個協助或者是使作弊難度更高的一的輔助系統。</p><h1 id="智慧線上監考系統的議題？"><a href="#智慧線上監考系統的議題？" class="headerlink" title="智慧線上監考系統的議題？"></a>智慧線上監考系統的議題？</h1><p>因為有很多資料會被這些系統的廠商蒐集，像是考試時的影像和聲音,考試的習慣的資料甚至是考試者個身份都會被蒐集，這些資料如果被有心人士拿去操控，可能會造成個人隱私上面的問題。<br>也有研究指出，很多做這種智慧線上監考的人會在考試的時候更緊張，並且有不太好的表現，事實上，這更是一個有關心裡層面的問題，因為受試者是感受到真實被一個人或者是一個機器看你來考試的感覺，某方面來講也可能帶給讓考生更不自在的因素以及原因，也可以從它們考試中被觀察出來。<br>當然有規則，就有那些喜歡破壞規則的人，因為系統肯定會有一些漏洞存在，所以很多人可能會試著去挑戰，要怎麼在系統的監控下作弊，在網路上甚至有些人會分享它們如何在這種環境下作弊的經歷和作弊的技巧，當然我並不鼓勵大家去作弊，但是我相信如果有更多這樣的漏洞被發現，就像是資安的攻防戰，如果知道怎麼攻擊，就能更有效的去防禦。</p><h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>其實智慧線上監考系統並不會使考試的品質更好，它更多的是讓作弊的難度增加，並且保持考試的公平性，當然因為現在AI的技術一直在不斷的進步，這些數據會如何有效的被運用並且偵測出作弊的行為將會是未來的趨勢，我想在未來，我們可能都要慢慢開始來適應這樣新的考試型態，並且學會與AI科技的技術共存。</p>]]></content>
    
    
    <summary type="html">介紹智慧線上監考系統，在現在疫情的情況下，所以有的實體考試都被取消掉了，沒有人監考嘛？ 如果人工智慧幫你監考你覺的如何呢？</summary>
    
    
    
    
    <category term="Technology" scheme="https://h123a456rr789y.github.io/tags/Technology/"/>
    
    <category term="AI" scheme="https://h123a456rr789y.github.io/tags/AI/"/>
    
  </entry>
  
  <entry>
    <title>Openpose Intallation on Ubuntu 18.04</title>
    <link href="https://h123a456rr789y.github.io/2021/05/31/Openpose-Intallation-on-Ubuntu-18-04/"/>
    <id>https://h123a456rr789y.github.io/2021/05/31/Openpose-Intallation-on-Ubuntu-18-04/</id>
    <published>2021-05-31T12:33:19.000Z</published>
    <updated>2022-08-11T10:03:00.890Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Openpose-Intallation-on-Ubuntu-18-04"><a href="#Openpose-Intallation-on-Ubuntu-18-04" class="headerlink" title="Openpose Intallation on Ubuntu 18.04"></a>Openpose Intallation on Ubuntu 18.04</h1><h1 id="Step1-安裝nvidia驅動"><a href="#Step1-安裝nvidia驅動" class="headerlink" title="Step1: 安裝nvidia驅動"></a>Step1: 安裝nvidia驅動</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:graphics-drivers/ppa</span><br><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure><ol><li><p>在Ubuntu 中搜尋 Software ＆ Update 並在下其Additional Drivers 中找到最新的 driver 版本 並更新完後重新開機 （本電腦使用的是GTX 1080Ti CPU &amp; nvidia-drivers-455 open source的驅動版本）<br><img src="https://i.imgur.com/E1yBIVT.png"></p></li><li><p>重開機後用指令<code>nvidia-settings</code> or <code>nvidia-smi</code> 將會看到一下畫面 就確認安裝完成</p></li></ol><p><img src="https://i.imgur.com/ygTSgQP.png"></p><p><img src="https://i.imgur.com/cuiOc9h.png"></p><h1 id="Step2-安裝CUDA10"><a href="#Step2-安裝CUDA10" class="headerlink" title="Step2: 安裝CUDA10"></a>Step2: 安裝CUDA10</h1><ol><li><p>進到 [Cuda Tookit 10 Arichive](<a href="https://developer.nvidia.com/cu">https://developer.nvidia.com/cu</a> da-10.0-download-archive) 下載頁面並一下表只是點選下載.run 檔<br><img src="https://i.imgur.com/HcymOrR.png"></p></li><li><p>安裝一些東西</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install freeglut3-dev build-essential libx11-dev libxmu-dev libxi-dev libgl1-mesa-glx libglu1-mesa libglu1-mesa-dev</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>執行.run檔並且安裝, 一開始的文字就空白到底,其他則照下圖填寫</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo sh cuda_10.0.130_410.48_linux.run</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/W1HYBft.png"></p></li><li><p>完成後大概長的樣子</p></li></ol><p><img src="https://i.imgur.com/wePCE5R.png"></p><ol start="5"><li>配置環境變量<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">echo &#x27;export PATH=/usr/local/cuda/bin:$PATH&#x27; &gt;&gt; ~/.bashrc</span><br><span class="line">echo &#x27;export LD_LIBRARY_PATH=/usr/local/cuda/lib64:$LD_LIBRARY_PATH&#x27; &gt;&gt; ~/.bashrc</span><br><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure></li></ol><h1 id="Step3-安裝Cudnn"><a href="#Step3-安裝Cudnn" class="headerlink" title="Step3: 安裝Cudnn"></a>Step3: 安裝Cudnn</h1><ol><li>到<a href="https://developer.nvidia.com/rdp/cudnn-archive">nviada官往</a>登入,並下載找到支援10.0的版本 (本人使用 cuDNN v7.6.2 for CUDA 10.0),並將以下四個檔案都下載下來</li></ol><p><img src="https://i.imgur.com/kZuZHUf.png"><br><img src="https://i.imgur.com/Cjh74cG.png"></p><ol start="2"><li><p>解壓縮後將全部放到cuda資料夾</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xvf cudnn-10.0-linux-x64-v7.3.1.20.tgz</span><br></pre></td></tr></table></figure></li><li><p>執行一下指令將一些資料複製到一下路徑並更改檔案權限,以及給予soft link</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">sudo cp cuda/include/cudnn.h /usr/local/cuda/include/</span><br><span class="line"></span><br><span class="line">sudo cp cuda/lib64/lib* /usr/local/cuda/lib64/</span><br><span class="line"></span><br><span class="line">sudo chmod +r libcudnn.so.7.3.1</span><br><span class="line"></span><br><span class="line">sudo ln -sf libcudnn.so.7.3.1 libcudnn.so.7</span><br><span class="line"></span><br><span class="line">sudo ln -sf libcudnn.so.7 libcudnn.so</span><br><span class="line"></span><br><span class="line">sudo ldconfig</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li></li></ol><h1 id="Step4-安裝-cmake"><a href="#Step4-安裝-cmake" class="headerlink" title="Step4: 安裝 cmake"></a>Step4: 安裝 cmake</h1><ol><li>執行以下指令安裝 並且解壓縮 便可以在bin的資料夾下開啟圖形界面<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line"></span><br><span class="line">sudo apt-get install qt5-default qtcreator</span><br><span class="line"></span><br><span class="line">wget https://cmake.org/files/v3.15/cmake-3.15.6.tar.gz</span><br><span class="line"></span><br><span class="line">tar -xzf cmake-3.15.6.tar.gz</span><br><span class="line"></span><br><span class="line">cd cmake-3.15.6/</span><br><span class="line"></span><br><span class="line">cd bin/</span><br><span class="line"></span><br><span class="line">./cmake-gui</span><br><span class="line"></span><br></pre></td></tr></table></figure><img src="https://i.imgur.com/LUbMZEP.png"></li></ol><h1 id="Step5-安裝-opencv4-2-0"><a href="#Step5-安裝-opencv4-2-0" class="headerlink" title="Step5: 安裝 opencv4.2.0"></a>Step5: 安裝 opencv4.2.0</h1><ol><li><p>執行一下指令以安裝 並且編譯</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line"></span><br><span class="line">sudo apt-get install -y build-essential cmake git libgtk2.0-dev pkg-config libavcodec-dev libavformat-dev libswscale-dev</span><br><span class="line"></span><br><span class="line">sudo apt-get install -y libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev</span><br><span class="line"></span><br><span class="line">sudo apt-get install -y python2.7-dev python3.6-dev python-dev python-numpy python3-numpy</span><br><span class="line"></span><br><span class="line">sudo apt-get install -y libtbb2 libtbb-dev libjpeg-dev libpng-dev libtiff-dev libdc1394-22-dev</span><br><span class="line"></span><br><span class="line">sudo apt-get install -y libv4l-dev v4l-utils qv4l2 v4l2ucp</span><br><span class="line"></span><br><span class="line">sudo apt-get install -y curl</span><br><span class="line"></span><br><span class="line">sudo apt-get update</span><br><span class="line"></span><br><span class="line">wget https://github.com/opencv/opencv/archive/4.2.0.zip</span><br><span class="line"></span><br><span class="line">unzip 4.2.0.zip</span><br><span class="line"></span><br><span class="line">cd opencv-4.2.0/</span><br><span class="line"></span><br><span class="line">mkdir build</span><br><span class="line"></span><br><span class="line">cd build/</span><br><span class="line"></span><br><span class="line">cmake ..</span><br><span class="line"></span><br><span class="line">make -j6</span><br><span class="line"></span><br><span class="line">sudo make install -j6</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>檢查OpenCV的版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">python</span><br><span class="line"></span><br><span class="line">import cv2</span><br><span class="line"></span><br><span class="line">cv2.__version__</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/JmyVnzY.png"></p></li><li><p>測試OpenCV是否安裝成功,若成功則會看到以下結果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cd到opencv-4.2.0/samples/cpp/example_cmake</span><br><span class="line"></span><br><span class="line">cmake .</span><br><span class="line"></span><br><span class="line">make</span><br><span class="line"></span><br><span class="line">./opencv_example</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><p><img src="https://i.imgur.com/uxfSuiB.png"></p><h1 id="Step6-安裝-openpose"><a href="#Step6-安裝-openpose" class="headerlink" title="Step6: 安裝 openpose"></a>Step6: 安裝 openpose</h1><ul><li>先執行下列指令安裝套件<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install libcanberra-gtk-module libcanberra-gtk3-module</span><br><span class="line"></span><br><span class="line">sudo apt-get --assume-yes update</span><br><span class="line"></span><br><span class="line">sudo apt-get --assume-yes install build-essential</span><br><span class="line"></span><br><span class="line">sudo apt-get --assume-yes install libatlas-base-dev libprotobuf-dev libleveldb-dev libsnappy-dev libhdf5-serial-dev protobuf-compiler</span><br><span class="line"></span><br><span class="line">sudo apt-get --assume-yes install --no-install-recommends libboost-all-dev</span><br><span class="line"></span><br><span class="line">sudo apt-get --assume-yes install libgflags-dev libgoogle-glog-dev liblmdb-dev</span><br><span class="line"></span><br><span class="line">sudo apt-get --assume-yes install python-setuptools python-dev build-essential</span><br><span class="line"></span><br><span class="line">sudo apt install pip</span><br><span class="line"></span><br><span class="line">sudo apt install pip3</span><br><span class="line"></span><br><span class="line">sudo -H pip install --upgrade numpy protobuf opencv-python</span><br><span class="line"></span><br><span class="line">sudo apt-get --assume-yes install python3-setuptools python3-dev build-essential</span><br><span class="line"></span><br><span class="line">sudo apt-get --assume-yes install python3-pip</span><br><span class="line"></span><br><span class="line">sudo -H pip3 install --upgrade numpy protobuf opencv-python</span><br><span class="line"></span><br><span class="line">sudo apt-get --assume-yes install opencl-headers ocl-icd-opencl-dev</span><br><span class="line"></span><br><span class="line">git clone https://github.com/CMU-Perceptual-Computing-Lab/openpose.git</span><br><span class="line"></span><br><span class="line">cd openpose/</span><br><span class="line"></span><br><span class="line">git clone https://github.com/CMU-Perceptual-Computing-Lab/caffe.git</span><br><span class="line"></span><br><span class="line">git clone https://github.com/pybind/pybind11.git</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h2 id="Caffe-搭建"><a href="#Caffe-搭建" class="headerlink" title="Caffe 搭建"></a>Caffe 搭建</h2><ul><li><p>安裝下列套件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get --assume-yes install build-essential</span><br><span class="line"></span><br><span class="line">sudo apt-get install libprotobuf-dev libleveldb-dev libsnappy-dev libopencv-dev libhdf5-serial-dev protobuf-compiler</span><br><span class="line"></span><br><span class="line">sudo apt-get install --no-install-recommends libboost-all-dev</span><br><span class="line"></span><br><span class="line">sudo apt-get install libopenblas-dev liblapack-dev libatlas-base-dev</span><br><span class="line"></span><br><span class="line">sudo apt-get install libgflags-dev libgoogle-glog-dev liblmdb-dev</span><br></pre></td></tr></table></figure></li><li><p>從caffe gitgub 下載下來</p><ul><li><a href="https://github.com/BVLC/caffe/tree/f019d0dfe86f49d1140961f8c7dec22130c83154">Caffe</a></li></ul></li><li><p>Makefile.config 複製一份並修改</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cp Makefile.config.example Makefile.config</span><br></pre></td></tr></table></figure></li><li><p>替換<code>Makefile.config</code> 中設定</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">將</span><br><span class="line">#USE_CUDNN := 1</span><br><span class="line">修改成：</span><br><span class="line">USE_CUDNN := 1</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">#如果此處是OpenCV2，則不用修改</span><br><span class="line">將</span><br><span class="line">#OPENCV_VERSION := 3</span><br><span class="line">修改爲：</span><br><span class="line">OPENCV_VERSION := 3</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">將</span><br><span class="line">#WITH_PYTHON_LAYER := 1</span><br><span class="line">修改爲</span><br><span class="line">WITH_PYTHON_LAYER := 1</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">INCLUDE_DIRS := $(PYTHON_INCLUDE) /usr/local/include</span><br><span class="line">LIBRARY_DIRS := $(PYTHON_LIB) /usr/local/lib /usr/lib</span><br><span class="line">修改爲：</span><br><span class="line">INCLUDE_DIRS := $(PYTHON_INCLUDE) /usr/local/include /usr/include/hdf5/serial</span><br><span class="line">LIBRARY_DIRS := $(PYTHON_LIB) /usr/local/lib /usr/lib /usr/lib/x86_64-linux-gnu /usr/lib/x86_64-linux-gnu/hdf5/serial       </span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">將</span><br><span class="line">CUDA_ARCH := -gencode arch=compute_20,code=sm_20 \</span><br><span class="line">        -gencode arch=compute_20,code=sm_21 \</span><br><span class="line">        -gencode arch=compute_30,code=sm_30 \</span><br><span class="line">        -gencode arch=compute_35,code=sm_35 \</span><br><span class="line">        -gencode arch=compute_50,code=sm_50 \</span><br><span class="line">        -gencode arch=compute_52,code=sm_52 \</span><br><span class="line">        -gencode arch=compute_60,code=sm_60 \</span><br><span class="line">        -gencode arch=compute_61,code=sm_61 \</span><br><span class="line">        -gencode arch=compute_61,code=compute_61</span><br><span class="line">修改爲</span><br><span class="line">CUDA_ARCH := -gencode arch=compute_30,code=sm_30 \</span><br><span class="line">        -gencode arch=compute_35,code=sm_35 \</span><br><span class="line">        -gencode arch=compute_50,code=sm_50 \</span><br><span class="line">        -gencode arch=compute_52,code=sm_52 \</span><br><span class="line">        -gencode arch=compute_60,code=sm_60 \</span><br><span class="line">        -gencode arch=compute_61,code=sm_61 \</span><br><span class="line">        -gencode arch=compute_61,code=compute_61</span><br><span class="line">...</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>修改 caffe 目錄下的 Makefile 文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">將：</span><br><span class="line">NVCCFLAGS +=-ccbin=$(CXX) -Xcompiler-fPIC $(COMMON_FLAGS)</span><br><span class="line">替換爲：</span><br><span class="line">NVCCFLAGS += -D_FORCE_INLINES -ccbin=$(CXX) -Xcompiler -fPIC $(COMMON_FLAGS)</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">將：</span><br><span class="line">LIBRARIES += glog gflags protobuf boost_system boost_filesystem m hdf5_hl hdf5</span><br><span class="line">改爲：</span><br><span class="line">LIBRARIES += glog gflags protobuf boost_system boost_filesystem m hdf5_serial_hl hdf5_serial</span><br><span class="line">...</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>編譯caffe, 在caffe的目錄下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo make all -j8</span><br><span class="line"></span><br><span class="line">sudo make runtest -j8</span><br></pre></td></tr></table></figure></li><li><p>編譯完後替代原本在 openpose資料夾下的Caffe資料夾中的內容</p></li></ul><h2 id="在-openpose-x2F-3rdparty-的資料夾中-刪除再下載一次caffe"><a href="#在-openpose-x2F-3rdparty-的資料夾中-刪除再下載一次caffe" class="headerlink" title="在 openpose&#x2F;3rdparty 的資料夾中 刪除再下載一次caffe"></a>在 openpose&#x2F;3rdparty 的資料夾中 刪除再下載一次caffe</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rm -r caffe/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">git clone https://github.com/CMU-Perceptual-Computing-Lab/caffe</span><br></pre></td></tr></table></figure><h2 id="編譯-openpose"><a href="#編譯-openpose" class="headerlink" title="編譯 openpose"></a>編譯 openpose</h2><ul><li>開啟cmake-gui<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">cd ~/cmake-3.15.6/bin/</span><br><span class="line">---</span><br><span class="line">title: Openpose Intallation on Ubuntu 18.04</span><br><span class="line">tags: Openpose,</span><br><span class="line">description: Openpose Intallation on Ubuntu 18.04 for GPU GeForce GTX 1080 Ti</span><br><span class="line">Date: 19/10/2020</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line"># Openpose Intallation on Ubuntu 18.04</span><br><span class="line"></span><br><span class="line"># Step1: 安裝nvidia驅動</span><br></pre></td></tr></table></figure>sudo add-apt-repository ppa:graphics-drivers&#x2F;ppa<br>sudo apt-get update<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">1. 在Ubuntu 中搜尋 Software ＆ Update 並在下其Additional Drivers 中找到最新的 driver 版本 並更新完後重新開機 （本電腦使用的是GTX 1080Ti CPU &amp; nvidia-drivers-455 open source的驅動版本）</span><br><span class="line">![](https://i.imgur.com/E1yBIVT.png)</span><br><span class="line"></span><br><span class="line">2. 重開機後用指令`nvidia-settings` or `nvidia-smi` 將會看到一下畫面 就確認安裝完成</span><br><span class="line"></span><br><span class="line">![](https://i.imgur.com/ygTSgQP.png)</span><br><span class="line"></span><br><span class="line">![](https://i.imgur.com/cuiOc9h.png)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Step2: 安裝CUDA10</span><br><span class="line">1. 進到 [Cuda Tookit 10 Arichive](https://developer.nvidia.com/cu da-10.0-download-archive) 下載頁面並一下表只是點選下載.run 檔</span><br><span class="line">![](https://i.imgur.com/HcymOrR.png)</span><br><span class="line"></span><br><span class="line">2. 安裝一些東西</span><br></pre></td></tr></table></figure>sudo apt-get install freeglut3-dev build-essential libx11-dev libxmu-dev libxi-dev libgl1-mesa-glx libglu1-mesa libglu1-mesa-dev</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">3. 執行.run檔並且安裝, 一開始的文字就空白到底,其他則照下圖填寫</span><br></pre></td></tr></table></figure><p>sudo sh cuda_10.0.130_410.48_linux.run</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">![](https://i.imgur.com/W1HYBft.png)</span><br><span class="line"></span><br><span class="line">4. 完成後大概長的樣子</span><br><span class="line"></span><br><span class="line">![](https://i.imgur.com/wePCE5R.png)</span><br><span class="line"></span><br><span class="line">5. 配置環境變量</span><br></pre></td></tr></table></figure><p>echo ‘export PATH&#x3D;&#x2F;usr&#x2F;local&#x2F;cuda&#x2F;bin:$PATH’ &gt;&gt; ~&#x2F;.bashrc<br>echo ‘export LD_LIBRARY_PATH&#x3D;&#x2F;usr&#x2F;local&#x2F;cuda&#x2F;lib64:$LD_LIBRARY_PATH’ &gt;&gt; ~&#x2F;.bashrc<br>source ~&#x2F;.bashrc</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># Step3: 安裝Cudnn</span><br><span class="line">1. 到[nviada官往](https://developer.nvidia.com/rdp/cudnn-archive)登入,並下載找到支援10.0的版本 (本人使用 cuDNN v7.6.2 for CUDA 10.0),並將以下四個檔案都下載下來</span><br><span class="line"></span><br><span class="line">![](https://i.imgur.com/kZuZHUf.png)</span><br><span class="line">![](https://i.imgur.com/Cjh74cG.png)</span><br><span class="line"></span><br><span class="line">2. 解壓縮後將全部放到cuda資料夾</span><br></pre></td></tr></table></figure><p>tar -xvf cudnn-10.0-linux-x64-v7.3.1.20.tgz</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3. 執行一下指令將一些資料複製到一下路徑並更改檔案權限,以及給予soft link</span><br></pre></td></tr></table></figure><p>sudo cp cuda&#x2F;include&#x2F;cudnn.h &#x2F;usr&#x2F;local&#x2F;cuda&#x2F;include&#x2F;</p><p>sudo cp cuda&#x2F;lib64&#x2F;lib* &#x2F;usr&#x2F;local&#x2F;cuda&#x2F;lib64&#x2F;</p><p>sudo chmod +r libcudnn.so.7.3.1</p><p>sudo ln -sf libcudnn.so.7.3.1 libcudnn.so.7</p><p>sudo ln -sf libcudnn.so.7 libcudnn.so</p><p>sudo ldconfig</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">4.</span><br><span class="line"></span><br><span class="line"># Step4: 安裝 cmake</span><br><span class="line">1. 執行以下指令安裝 並且解壓縮 便可以在bin的資料夾下開啟圖形界面</span><br></pre></td></tr></table></figure><p>sudo apt-get update</p><p>sudo apt-get install qt5-default qtcreator</p><p>wget <a href="https://cmake.org/files/v3.15/cmake-3.15.6.tar.gz">https://cmake.org/files/v3.15/cmake-3.15.6.tar.gz</a></p><p>tar -xzf cmake-3.15.6.tar.gz</p><p>cd cmake-3.15.6&#x2F;</p><p>cd bin&#x2F;</p><p>.&#x2F;cmake-gui</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">![](https://i.imgur.com/LUbMZEP.png)</span><br><span class="line"></span><br><span class="line"># Step5: 安裝 opencv4.2.0</span><br><span class="line">1. 執行一下指令以安裝 並且編譯</span><br></pre></td></tr></table></figure><p>sudo apt-get update</p><p>sudo apt-get install -y build-essential cmake git libgtk2.0-dev pkg-config libavcodec-dev libavformat-dev libswscale-dev</p><p>sudo apt-get install -y libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev</p><p>sudo apt-get install -y python2.7-dev python3.6-dev python-dev python-numpy python3-numpy</p><p>sudo apt-get install -y libtbb2 libtbb-dev libjpeg-dev libpng-dev libtiff-dev libdc1394-22-dev</p><p>sudo apt-get install -y libv4l-dev v4l-utils qv4l2 v4l2ucp</p><p>sudo apt-get install -y curl</p><p>sudo apt-get update</p><p>wget <a href="https://github.com/opencv/opencv/archive/4.2.0.zip">https://github.com/opencv/opencv/archive/4.2.0.zip</a></p><p>unzip 4.2.0.zip</p><p>cd opencv-4.2.0&#x2F;</p><p>mkdir build</p><p>cd build&#x2F;</p><p>cmake ..</p><p>make -j6</p><p>sudo make install -j6</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">2. 檢查OpenCV的版本</span><br></pre></td></tr></table></figure><p>python</p><p>import cv2</p><p>cv2.<strong>version</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">![](https://i.imgur.com/JmyVnzY.png)</span><br><span class="line"></span><br><span class="line">3. 測試OpenCV是否安裝成功,若成功則會看到以下結果</span><br></pre></td></tr></table></figure><p>cd到opencv-4.2.0&#x2F;samples&#x2F;cpp&#x2F;example_cmake</p><p>cmake .</p><p>make</p><p>.&#x2F;opencv_example</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">![](https://i.imgur.com/uxfSuiB.png)</span><br><span class="line"></span><br><span class="line"># Step6: 安裝 openpose</span><br><span class="line">- 先執行下列指令安裝套件</span><br></pre></td></tr></table></figure><p>sudo apt install libcanberra-gtk-module libcanberra-gtk3-module</p><p>sudo apt-get –assume-yes update</p><p>sudo apt-get –assume-yes install build-essential</p><p>sudo apt-get –assume-yes install libatlas-base-dev libprotobuf-dev libleveldb-dev libsnappy-dev libhdf5-serial-dev protobuf-compiler</p><p>sudo apt-get –assume-yes install –no-install-recommends libboost-all-dev</p><p>sudo apt-get –assume-yes install libgflags-dev libgoogle-glog-dev liblmdb-dev</p><p>sudo apt-get –assume-yes install python-setuptools python-dev build-essential</p><p>sudo apt install pip</p><p>sudo apt install pip3</p><p>sudo -H pip install –upgrade numpy protobuf opencv-python</p><p>sudo apt-get –assume-yes install python3-setuptools python3-dev build-essential</p><p>sudo apt-get –assume-yes install python3-pip</p><p>sudo -H pip3 install –upgrade numpy protobuf opencv-python</p><p>sudo apt-get –assume-yes install opencl-headers ocl-icd-opencl-dev</p><p>git clone <a href="https://github.com/CMU-Perceptual-Computing-Lab/openpose.git">https://github.com/CMU-Perceptual-Computing-Lab/openpose.git</a></p><p>cd openpose&#x2F;</p><p>git clone <a href="https://github.com/CMU-Perceptual-Computing-Lab/caffe.git">https://github.com/CMU-Perceptual-Computing-Lab/caffe.git</a></p><p>git clone <a href="https://github.com/pybind/pybind11.git">https://github.com/pybind/pybind11.git</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## Caffe 搭建</span><br><span class="line">- 安裝下列套件</span><br></pre></td></tr></table></figure><p>sudo apt-get –assume-yes install build-essential</p><p>sudo apt-get install libprotobuf-dev libleveldb-dev libsnappy-dev libopencv-dev libhdf5-serial-dev protobuf-compiler</p><p>sudo apt-get install –no-install-recommends libboost-all-dev</p><p>sudo apt-get install libopenblas-dev liblapack-dev libatlas-base-dev</p><p>sudo apt-get install libgflags-dev libgoogle-glog-dev liblmdb-dev</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 從caffe gitgub 下載下來</span><br><span class="line">    - [Caffe](https://github.com/BVLC/caffe/tree/f019d0dfe86f49d1140961f8c7dec22130c83154)</span><br><span class="line"></span><br><span class="line">- Makefile.config 複製一份並修改</span><br></pre></td></tr></table></figure><p>sudo cp Makefile.config.example Makefile.config</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 替換`Makefile.config` 中設定</span><br></pre></td></tr></table></figure><p>…<br>將<br>#USE_CUDNN :&#x3D; 1<br>修改成：<br>USE_CUDNN :&#x3D; 1<br>…</p><p>…<br>#如果此處是OpenCV2，則不用修改<br>將<br>#OPENCV_VERSION :&#x3D; 3<br>修改爲：<br>OPENCV_VERSION :&#x3D; 3<br>…</p><p>…<br>將<br>#WITH_PYTHON_LAYER :&#x3D; 1<br>修改爲<br>WITH_PYTHON_LAYER :&#x3D; 1<br>…</p><p>…<br>INCLUDE_DIRS :&#x3D; $(PYTHON_INCLUDE) &#x2F;usr&#x2F;local&#x2F;include<br>LIBRARY_DIRS :&#x3D; $(PYTHON_LIB) &#x2F;usr&#x2F;local&#x2F;lib &#x2F;usr&#x2F;lib<br>修改爲：<br>INCLUDE_DIRS :&#x3D; $(PYTHON_INCLUDE) &#x2F;usr&#x2F;local&#x2F;include &#x2F;usr&#x2F;include&#x2F;hdf5&#x2F;serial<br>LIBRARY_DIRS :&#x3D; $(PYTHON_LIB) &#x2F;usr&#x2F;local&#x2F;lib &#x2F;usr&#x2F;lib &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;hdf5&#x2F;serial<br>…</p><p>…<br>將<br>CUDA_ARCH :&#x3D; -gencode arch&#x3D;compute_20,code&#x3D;sm_20 <br>        -gencode arch&#x3D;compute_20,code&#x3D;sm_21 <br>        -gencode arch&#x3D;compute_30,code&#x3D;sm_30 <br>        -gencode arch&#x3D;compute_35,code&#x3D;sm_35 <br>        -gencode arch&#x3D;compute_50,code&#x3D;sm_50 <br>        -gencode arch&#x3D;compute_52,code&#x3D;sm_52 <br>        -gencode arch&#x3D;compute_60,code&#x3D;sm_60 <br>        -gencode arch&#x3D;compute_61,code&#x3D;sm_61 <br>        -gencode arch&#x3D;compute_61,code&#x3D;compute_61<br>修改爲<br>CUDA_ARCH :&#x3D; -gencode arch&#x3D;compute_30,code&#x3D;sm_30 <br>        -gencode arch&#x3D;compute_35,code&#x3D;sm_35 <br>        -gencode arch&#x3D;compute_50,code&#x3D;sm_50 <br>        -gencode arch&#x3D;compute_52,code&#x3D;sm_52 <br>        -gencode arch&#x3D;compute_60,code&#x3D;sm_60 <br>        -gencode arch&#x3D;compute_61,code&#x3D;sm_61 <br>        -gencode arch&#x3D;compute_61,code&#x3D;compute_61<br>…</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- 修改 caffe 目錄下的 Makefile 文件</span><br></pre></td></tr></table></figure><p>…<br>將：<br>NVCCFLAGS +&#x3D;-ccbin&#x3D;$(CXX) -Xcompiler-fPIC $(COMMON_FLAGS)<br>替換爲：<br>NVCCFLAGS +&#x3D; -D_FORCE_INLINES -ccbin&#x3D;$(CXX) -Xcompiler -fPIC $(COMMON_FLAGS)<br>…</p><p>…<br>將：<br>LIBRARIES +&#x3D; glog gflags protobuf boost_system boost_filesystem m hdf5_hl hdf5<br>改爲：<br>LIBRARIES +&#x3D; glog gflags protobuf boost_system boost_filesystem m hdf5_serial_hl hdf5_serial<br>…</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- 編譯caffe, 在caffe的目錄下</span><br></pre></td></tr></table></figure><p>sudo make all -j8</p><p>sudo make runtest -j8</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 編譯完後替代原本在 openpose資料夾下的Caffe資料夾中的內容</span><br><span class="line"></span><br><span class="line">## 在 openpose/3rdparty 的資料夾中 刪除再下載一次caffe</span><br></pre></td></tr></table></figure><p>rm -r caffe&#x2F;</p><p>git clone <a href="https://github.com/CMU-Perceptual-Computing-Lab/caffe">https://github.com/CMU-Perceptual-Computing-Lab/caffe</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">## 編譯 openpose</span><br><span class="line">- 開啟cmake-gui</span><br></pre></td></tr></table></figure><p>cd ~&#x2F;cmake-3.15.6&#x2F;bin&#x2F;</p><p>.&#x2F;cmake-gui</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">- 如下圖填入對應的資訊</span><br><span class="line"></span><br><span class="line">![](https://i.imgur.com/S7LhyH8.png)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- 按下configure 並在此界面按下」Finish</span><br><span class="line"></span><br><span class="line">![](https://i.imgur.com/h9JDYaJ.png)</span><br><span class="line"></span><br><span class="line">- 完成configure 的樣子</span><br><span class="line"></span><br><span class="line">![](https://i.imgur.com/xm6UT2u.png)</span><br><span class="line"></span><br><span class="line">- 請滑道下面選取所有的download選項如上圖</span><br><span class="line"></span><br><span class="line">- 如果configure沒有問題,就可以按Generate生成</span><br><span class="line"></span><br><span class="line">- 接著就可以編譯openpose了</span><br></pre></td></tr></table></figure><p>cd openpose&#x2F;build&#x2F;</p><p>make -j6</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 開啟openpose</span><br></pre></td></tr></table></figure><p>cd openpose&#x2F;</p><p>.&#x2F;build&#x2F;examples&#x2F;openpose&#x2F;openpose.bin</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">- 輸入影片</span><br></pre></td></tr></table></figure><p>.&#x2F;build&#x2F;examples&#x2F;openpose&#x2F;openpose.bin –video test.mp4</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 輸出影片</span><br></pre></td></tr></table></figure><p>.&#x2F;build&#x2F;examples&#x2F;openpose&#x2F;openpose.bin –video test.mp4 –write_video test_result.avi</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 接著就可以學怎麼用openpose了 讚讚 :+1:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Reference</span><br><span class="line">- [簡單安裝openpose on ubuntu 18.04](https://benjaminnl.pixnet.net/blog/post/4932155-openpose%E7%B0%A1%E5%96%AE%E5%AE%89%E8%A3%9D-ubuntu18.04%2Bopenpose1.5.1%2Bcuda10.0%2Bcudn)</span><br><span class="line">- [ubuntu18.04 cuda10 caffe openpose環境配置與使用](https://www.twblogs.net/a/5d701a51bd9eee541c33ee25)</span><br><span class="line">- [OpenPose安裝過程中遇到的問題](https://blog.csdn.net/blgpb/article/details/87925768)</span><br><span class="line">./cmake-gui</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>如下圖填入對應的資訊</li></ul><p><img src="https://i.imgur.com/S7LhyH8.png"></p><ul><li>按下configure 並在此界面按下」Finish</li></ul><p><img src="https://i.imgur.com/h9JDYaJ.png"></p><ul><li>完成configure 的樣子</li></ul><p><img src="https://i.imgur.com/xm6UT2u.png"></p><ul><li><p>請滑道下面選取所有的download選項如上圖</p></li><li><p>如果configure沒有問題,就可以按Generate生成</p></li><li><p>接著就可以編譯openpose了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd openpose/build/</span><br><span class="line"></span><br><span class="line">make -j6</span><br></pre></td></tr></table></figure></li><li><p>開啟openpose</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd openpose/</span><br><span class="line"></span><br><span class="line">./build/examples/openpose/openpose.bin</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>輸入影片</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./build/examples/openpose/openpose.bin --video test.mp4</span><br></pre></td></tr></table></figure></li><li><p>輸出影片</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./build/examples/openpose/openpose.bin --video test.mp4 --write_video test_result.avi</span><br></pre></td></tr></table></figure></li><li><p>接著就可以學怎麼用openpose了 讚讚 :+1:</p></li></ul><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul><li><a href="https://benjaminnl.pixnet.net/blog/post/4932155-openpose%E7%B0%A1%E5%96%AE%E5%AE%89%E8%A3%9D-ubuntu18.04%2Bopenpose1.5.1%2Bcuda10.0%2Bcudn">簡單安裝openpose on ubuntu 18.04</a></li><li><a href="https://www.twblogs.net/a/5d701a51bd9eee541c33ee25">ubuntu18.04 cuda10 caffe openpose環境配置與使用</a></li><li><a href="https://blog.csdn.net/blgpb/article/details/87925768">OpenPose安裝過程中遇到的問題</a></li></ul>]]></content>
    
    
    <summary type="html">Document of installing openpose on ubuntu 18.04</summary>
    
    
    
    
    <category term="Computer Vision" scheme="https://h123a456rr789y.github.io/tags/Computer-Vision/"/>
    
  </entry>
  
  <entry>
    <title>硬碟格式化筆記</title>
    <link href="https://h123a456rr789y.github.io/2021/05/31/%E7%A1%AC%E7%A2%9F%E6%A0%BC%E5%BC%8F%E5%8C%96%E7%AD%86%E8%A8%98/"/>
    <id>https://h123a456rr789y.github.io/2021/05/31/%E7%A1%AC%E7%A2%9F%E6%A0%BC%E5%BC%8F%E5%8C%96%E7%AD%86%E8%A8%98/</id>
    <published>2021-05-31T12:04:46.000Z</published>
    <updated>2022-08-11T10:03:00.890Z</updated>
    
    <content type="html"><![CDATA[<h1 id="硬碟格式化筆記"><a href="#硬碟格式化筆記" class="headerlink" title="硬碟格式化筆記"></a>硬碟格式化筆記</h1><h2 id="什麼是格式化"><a href="#什麼是格式化" class="headerlink" title="什麼是格式化"></a>什麼是格式化</h2><p>格式化是對儲存裝置所選的分割區(Partition) 給予一全新空白「根目錄Root」，創建出一個『歸檔系統』，就如同規劃一本書的「目錄索引」，可以組織儲存裝置內的資料檔案，並能更有效利用儲存空間，存放更多檔案；格式化也等同於清除儲存裝置內所有格式、檔案</p><h2 id="格式化分類"><a href="#格式化分類" class="headerlink" title="格式化分類"></a>格式化分類</h2><h3 id="低階格式化"><a href="#低階格式化" class="headerlink" title="低階格式化"></a>低階格式化</h3><ul><li>電腦儲存檔案資料都是由二進位的「0和1」所組成。如果將USB隨身碟低階格式化，原先USB隨身碟內所儲&#x2F;home&#x2F;harry&#x2F;Desktop&#x2F;blog&#x2F;source&#x2F;_posts&#x2F;硬碟格式化筆記.md存的資料將會被完全刪除，USB隨身碟內的資料都重置為「0」，就是原場USB的設定</li><li>無法救援</li><li>可以用來救援損壞 故障或無法辨識</li></ul><h3 id="高階格式化"><a href="#高階格式化" class="headerlink" title="高階格式化"></a>高階格式化</h3><p>分為兩類，並為Window中格式化的兩個選項</p><ul><li>快速格式化(快)<ul><li>不會檢查損壞區</li></ul></li><li>完整格式化(慢)<ul><li>會檢查損壞區</li></ul></li></ul><p>雖然檔案都看似清空可是仍可救援</p><h2 id="FAT32、NTFS、exFAT的檔案格式差別為何，該如何選擇？"><a href="#FAT32、NTFS、exFAT的檔案格式差別為何，該如何選擇？" class="headerlink" title="FAT32、NTFS、exFAT的檔案格式差別為何，該如何選擇？"></a>FAT32、NTFS、exFAT的檔案格式差別為何，該如何選擇？</h2><p>首先，要先知道不同的讀取檔案格式，可能會影響單存取一檔案大小，空間使用效率，還有不同系統的相容性，以下速度為單次檔案讀寫速度</p><h3 id="FAT32"><a href="#FAT32" class="headerlink" title="FAT32"></a>FAT32</h3><ul><li>為最早期最通用的檔案格式</li><li>相容性(優):通用於不同的系統（Windows, linux, MacOS）</li><li>速度(慢):一次只能讀寫一個最大 4 GB檔案，分割區Partition最大分區為8TB</li><li>使用:可以用於跨平台間小檔案得傳輸</li></ul><h3 id="NTFS"><a href="#NTFS" class="headerlink" title="NTFS"></a>NTFS</h3><ul><li>NTFS是在FAT32之後出現的檔案系統格式，是Windows主要使用的檔案格式</li><li>相容性(差):用於所有版本的Windows，在一般情況下Mac OS只能讀取檔案，而在一些Linux發行版系統中也只能讀取</li><li>速度(快):NTFS單次讀取&#x2F;寫入檔案文件容量以及傳輸速度為 16TB（理論值）</li><li>使用: 主要在 Windows 上儲存高畫質影片、照片圖檔等大容量檔案需求者</li></ul><h3 id="exFAT"><a href="#exFAT" class="headerlink" title="exFAT"></a>exFAT</h3><ul><li>exFAT是在FAT之後開發優化快閃記憶體的檔案系統</li><li>相容性(中):基本上與所有版本的Windows和現代版本的Mac OS 讀寫兼容，在Linux上需要其他軟體輔助。</li><li>速度(中): exFAT在檔案文件單次讀取&#x2F;寫入容量以及傳輸速度為64ZB</li><li>使用: 在Windows 和 MacOS 之間遊走的人，且需要比較好傳輸效率的人</li></ul><h3 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h3><p>如使用的作業系統是 Windows，NTFS是最理想的選擇，但如果如果要跨平作業系統的話，會考慮相容性較佳的exFAT和 FAT32，在透過使用OS和存取速度下去做選擇，因為在linux上安裝讀取exFAT需要額外安裝東西相較麻煩會建議FAT32(速度較慢)，但是如果只有用MacOS的話會建議exFAT(速度較快)</p><ul><li>但如果USB隨身碟要當開機碟建議可以使用FAT32，這樣對於引導系統啟動的相容性會好一些<br><img src="https://i.imgur.com/ZC0WADJ.png"></li></ul>]]></content>
    
    
    <summary type="html">介紹各種類型的硬碟格式化，以及不同的格式優缺點</summary>
    
    
    
    
    <category term="Technology" scheme="https://h123a456rr789y.github.io/tags/Technology/"/>
    
    <category term="Computer" scheme="https://h123a456rr789y.github.io/tags/Computer/"/>
    
  </entry>
  
  <entry>
    <title>Online Camera LiDAR Fusion and Object Detection on Hybrid Data for Autonomous Driving</title>
    <link href="https://h123a456rr789y.github.io/2021/03/25/Online-Camera-LiDAR-Fusion-and-Object-Detection-on-Hybrid-Data-for-Autonomous-Driving/"/>
    <id>https://h123a456rr789y.github.io/2021/03/25/Online-Camera-LiDAR-Fusion-and-Object-Detection-on-Hybrid-Data-for-Autonomous-Driving/</id>
    <published>2021-03-24T17:15:51.000Z</published>
    <updated>2022-08-11T10:03:00.890Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Online-Camera-LiDAR-Fusion-and-Object-Detection-on-Hybrid-Data-for-Autonomous-Driving"><a href="#Online-Camera-LiDAR-Fusion-and-Object-Detection-on-Hybrid-Data-for-Autonomous-Driving" class="headerlink" title="Online Camera LiDAR Fusion and Object Detection on Hybrid Data for Autonomous Driving"></a>Online Camera LiDAR Fusion and Object Detection on Hybrid Data for Autonomous Driving</h1><h2 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h2><ul><li>Improve the LiDAR and camera fusion (Extrinct Calibration)</li><li>Intensity discontinuities and erosion and dilation of the edge image for increased robustness against shadows and visual patterns, which is a recurring problem in point cloud related work</li><li>use a gradient-free optimizer</li><li>Fusion pipeline is lightweight and able to run in real-time</li><li>Modify from Faster R-CNN</li><li>Test dataset KITTI data set</li><li>Outlook on how radar can be added to the fusion pipeline via velocity matching</li><li>real-time with 10Hz</li></ul><h2 id="Comparision"><a href="#Comparision" class="headerlink" title="Comparision"></a>Comparision</h2><h3 id="Sensors"><a href="#Sensors" class="headerlink" title="Sensors"></a>Sensors</h3><ul><li>RGB cameras:<ul><li>color and texture information</li><li>good for object classification</li><li>limited detection range </li><li>perform poorly in limited lighting or adverse weather conditions</li><li>cheap</li></ul></li><li>LiDARs<ul><li>provide precise distance info </li><li>wider range detection</li><li>small object detection</li><li>no colar info</li><li>performance decreases in heavy rain</li><li>expensive</li></ul></li><li>Radars<ul><li>provide precise distance and velocity info </li><li>work well in inclement weather</li><li>rather low resolution (解析度)</li><li>bad object detection</li></ul></li></ul><h2 id="Fusion-techniques"><a href="#Fusion-techniques" class="headerlink" title="Fusion techniques"></a>Fusion techniques</h2><ul><li><p>High-level fusion (HLF)</p><ul><li>Centralized System </li><li>detects objects with each sensor separately </li><li>subsequently combines these detections</li><li>limited available information<br>  <img src="https://i.imgur.com/tCPlv6Y.png"></li></ul></li><li><p>Low-level fusion (LLF)</p><ul><li>Distributed System</li><li>Combines all the data from raw data level</li><li>More difficulties combining the data<br>  <img src="https://i.imgur.com/OokNpbV.png"></li></ul></li></ul><h2 id="Key-of-Sensing"><a href="#Key-of-Sensing" class="headerlink" title="Key of Sensing"></a>Key of Sensing</h2><ul><li>Time-synchronized for ego-motion</li><li>Fusion and detection algorithms need to be real-time</li></ul><h2 id="Related-Work"><a href="#Related-Work" class="headerlink" title="Related Work"></a>Related Work</h2><ul><li><p>Use 3D markers （inconvenient）<a href="https://dspace5.zcu.cz/bitstream/11025/26408/1/Velas.pdf">REF</a></p></li><li><p>Deep learning based end-to-end architecture for feature extraction, feature matching and global regression <a href="https://arxiv.org/pdf/1707.03167.pdf">REF</a></p><ul><li>Large amount of data is required for training</li><li>Separate data collection for each vehicle</li></ul></li><li><p>Edge alignments between optical camera and LiDAR data using reflectivity values <a href="https://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&arnumber=7472200">REF</a></p><ul><li>Uses an exhaustive <strong>grid search</strong> to fit edges in image and point cloud data</li><li>takes to many time –&gt; not real-time</li></ul></li><li><p>(The One this paper applies)Target-less camera LiDAR calibration <a href="https://pdfs.semanticscholar.org/1f97/022c8c826c1eb51de9e810d3dd07620fc902.pdf?_ga=2.63223211.589764074.1600795870-2103886092.1600795870">REF</a></p></li></ul><h2 id="Methodology"><a href="#Methodology" class="headerlink" title="Methodology"></a>Methodology</h2><ul><li><p>Use LLF</p><ul><li>prevent the occurrence of aberrations and duplicate objects</li></ul></li><li><p>Use MLF </p><ul><li>An abstraction sitting on top of LLF, where extracted features from multiple sensor data are fused</li></ul></li><li><p>Sensor</p><ul><li>Velodyne HDL-64E S3<br>  ![](<a href="https://i.imgur.com/PpcfZsI.png">https://i.imgur.com/PpcfZsI.png</a> &#x3D;300x300)</li></ul></li></ul><p><img src="https://i.imgur.com/YcNH2AX.png"></p><p><img src="https://i.imgur.com/ez96zbE.png"></p><h3 id="Fusion-of-Lidar-and-Camera-extrinct-calibration"><a href="#Fusion-of-Lidar-and-Camera-extrinct-calibration" class="headerlink" title="Fusion of Lidar and Camera (extrinct calibration)"></a>Fusion of Lidar and Camera (extrinct calibration)</h3><ul><li>Relies on accurate instrict calibration of sensors</li><li>Use a ring pattern Calibration board <a href="https://www.ri.cmu.edu/pub_files/2009/10/Calib.pdf">REF</a><ul><li>Reduce 70% reduction of the average reproject errors</li></ul></li><li>Finding the 4x4 transformation matrix TL<ul><li>TL cconsists of a rotation and a translation (6 degrees)</li><li>Find edges in camara images match in point cloud with similarity function S<br>  <img src="https://i.imgur.com/KIfiEmg.png"></li></ul></li><li>Use the inverse distance transformation (IDT) and erosion and dilation (ED) to increase the robustness to shadows in the scen</li></ul>]]></content>
    
    
    <summary type="html">Online Camera LiDAR Fusion for Autonomous Driving cars</summary>
    
    
    
    
    <category term="Technology" scheme="https://h123a456rr789y.github.io/tags/Technology/"/>
    
  </entry>
  
  <entry>
    <title>3D感測技術</title>
    <link href="https://h123a456rr789y.github.io/2021/03/24/3D%E6%84%9F%E6%B8%AC%E6%8A%80%E8%A1%93/"/>
    <id>https://h123a456rr789y.github.io/2021/03/24/3D%E6%84%9F%E6%B8%AC%E6%8A%80%E8%A1%93/</id>
    <published>2021-03-23T18:09:45.000Z</published>
    <updated>2022-08-11T10:03:00.890Z</updated>
    
    <content type="html"><![CDATA[<h1 id="3D感測技術"><a href="#3D感測技術" class="headerlink" title="3D感測技術"></a>3D感測技術</h1><p>3D感測技術目前主要可分為立體視覺（Stereo Vision）、結構光（Structured Light）、飛時測距（Time of Flight；簡稱：TOF</p><h2 id="立體視覺（Stereo-Vision）"><a href="#立體視覺（Stereo-Vision）" class="headerlink" title="立體視覺（Stereo Vision）"></a>立體視覺（Stereo Vision）</h2><p>立體視覺（Stereo Vision）是基於人眼視差的原理，在自然光源下（<strong>被動式</strong>光源），透過兩個或兩個以上相機模組從不同的角度對同一物體拍攝影像，再進行三角測量法等運算來取得與物體之間的距離資訊。<br><img src="https://i.imgur.com/UL9qj5L.png"></p><h3 id="優點："><a href="#優點：" class="headerlink" title="優點："></a>優點：</h3><ol><li>省電</li><li>明亮環境表現佳，適合在戶外長期運作</li><li>低成本</li></ol><h3 id="缺點："><a href="#缺點：" class="headerlink" title="缺點："></a>缺點：</h3><ol><li>軟體演算法複雜</li><li>延遲性高</li><li>不適合在昏暗環境使用</li></ol><h3 id="應用："><a href="#應用：" class="headerlink" title="應用："></a>應用：</h3><p>立體視覺目前已應用在各種3D相機、AR&#x2F;VR頭戴式裝置、機器人等領域，通常與結構光、TOF混合使用，如智慧車應用領域。</p><h2 id="結構光（Structured-Light）"><a href="#結構光（Structured-Light）" class="headerlink" title="結構光（Structured Light）"></a>結構光（Structured Light）</h2><p>結構光（Structured Light）是一種<strong>主動式</strong>深度感測技術，基本零組件包含IR發射器、IR相機模組、RGB相機模組等</p><p>其原理是遊紅外線投影機先對物體發射特定圖案的光斑（Pattern），再經由攝影機來接收物體表面上的光斑圖案編碼（Light Coding），進而比對與原始投射光斑的異同，並利用三角原理計算出物體的三維座標。</p><p><img src="https://i.imgur.com/o3p4m1C.png"></p><h3 id="優點：-1"><a href="#優點：-1" class="headerlink" title="優點："></a>優點：</h3><ol><li>深度準確高</li></ol><h3 id="缺點：-1"><a href="#缺點：-1" class="headerlink" title="缺點："></a>缺點：</h3><ol><li>易受自然光照影響</li><li>較適合短距離測量</li></ol><h3 id="應用：-1"><a href="#應用：-1" class="headerlink" title="應用："></a>應用：</h3><p>目前已應用於人臉辨識、體感遊戲機、工業用機器視覺檢測（AOI）等領域</p><h2 id="飛行時間測距（Time-of-Flight；簡稱：TOF）"><a href="#飛行時間測距（Time-of-Flight；簡稱：TOF）" class="headerlink" title="飛行時間測距（Time of Flight；簡稱：TOF）"></a>飛行時間測距（Time of Flight；簡稱：TOF）</h2><p>TOF也是一種<strong>主動式</strong>深度感測技術，其原理為透過紅外線折返的時間去計算跟物體之間的距離，以得出3D景深圖。基本零組件包括IR發射器、IR接收器、RGB相機模組和感光元件或感應陣列。主要分為iTOF &amp; dTOF兩種類別</p><h3 id="iTOF-indirect-ToF"><a href="#iTOF-indirect-ToF" class="headerlink" title="iTOF(indirect-ToF)"></a>iTOF(indirect-ToF)</h3><p>iToF 是利用發射特定頻率的光，檢測反射光和發射器之間的位置差距(算相位差)，測量飛行時間<br><img src="https://i.imgur.com/5gYJ8ue.png"></p><h4 id="優點：-2"><a href="#優點：-2" class="headerlink" title="優點："></a>優點：</h4><ol><li>較低成本</li><li>較高解析度優勢</li></ol><h4 id="缺點：-2"><a href="#缺點：-2" class="headerlink" title="缺點："></a>缺點：</h4><ol><li>適用於短距離測距 （環境光源會對電路產生干擾）</li></ol><h4 id="應用：-2"><a href="#應用：-2" class="headerlink" title="應用："></a>應用：</h4><p>主要應用在手機臉部辨識、手勢辨識等測距距離較短的場景中</p><h3 id="dTOF-direct-ToF"><a href="#dTOF-direct-ToF" class="headerlink" title="dTOF (direct-ToF)"></a>dTOF (direct-ToF)</h3><p>dToF 是透過直接向測量物體發射雷射脈衝，並測量反射脈衝和發射器之間的時間間隔，得到光的飛行時間而直接計算待測物體的距離。<br>常見的 dToF 感測器接收端是使用單光子崩潰二極體 (SPAD)，或累崩式光電二極體 (APD)<br><img src="https://i.imgur.com/8gjedKh.png"></p><h4 id="優點：-3"><a href="#優點：-3" class="headerlink" title="優點："></a>優點：</h4><ol><li>在<strong>多個物件</strong>的感測上精準度較高</li><li>更適用於較遠距的場景</li></ol><h4 id="缺點：-3"><a href="#缺點：-3" class="headerlink" title="缺點："></a>缺點：</h4><ol><li>dToF 相較於 iToF 來說製作困難度要高上不少(需要較多sensor)</li><li>成本較高</li></ol><h4 id="應用：-3"><a href="#應用：-3" class="headerlink" title="應用："></a>應用：</h4><p>應用在VR&#x2F;AR和自駕車場景</p><h2 id="三大感測比較"><a href="#三大感測比較" class="headerlink" title="三大感測比較"></a>三大感測比較</h2><p><img src="https://i.imgur.com/YkrHvWj.png"></p>]]></content>
    
    
    <summary type="html">介紹3D感測技術優缺點以及應用</summary>
    
    
    
    
    <category term="Technology" scheme="https://h123a456rr789y.github.io/tags/Technology/"/>
    
  </entry>
  
  <entry>
    <title>Passiv</title>
    <link href="https://h123a456rr789y.github.io/2020/04/28/passiv/"/>
    <id>https://h123a456rr789y.github.io/2020/04/28/passiv/</id>
    <published>2020-04-28T00:03:36.000Z</published>
    <updated>2022-08-11T10:03:00.890Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Passiv"><a href="#Passiv" class="headerlink" title="Passiv"></a>Passiv</h1><ul><li>Es gibt Verben, die keine Passivform bilden können. Dazu gehören alle Verben ohne Akkusativobjekt, also zum Beispiel reflexive Verben (z. B. sich schneiden) oder Verben, die im Perfekt mit sein gebildet werden (z. B. rennen).</li></ul><h2 id="Vorgangspassiv"><a href="#Vorgangspassiv" class="headerlink" title="Vorgangspassiv"></a>Vorgangspassiv</h2><ul><li>Mit dem Vorgangspassiv (werden-Passiv) betonst du eine Handlung oder einen Vorgang: Was passiert? （用來描述發生的動作）</li><li>Form:<ul><li><strong>Werden + Partizip II</strong></li></ul></li><li>Beispiel:<ul><li>Ein Mann wurde angefahren.</li><li>Dem Verletzten wurde ein Verband angelegt.</li><li>Jetzt wird der Mann ins Krankenhaus gebracht.</li></ul></li><li>Zeitstufen<br>  <img src="https://i.imgur.com/VOc6nAV.png"></li></ul><h2 id="Zustandspassiv"><a href="#Zustandspassiv" class="headerlink" title="Zustandspassiv"></a>Zustandspassiv</h2><ul><li>Mit dem Zustandspassiv beschreiben wir den Zustand nach einer Handlung. （用來表示動作完後的狀態)</li><li>Form:<ul><li><strong>Sein+ Partizip II</strong></li></ul></li><li>Beispiel:<ul><li>Er ist verletzt.</li><li>Die Tür ist geöffnet.</li></ul></li><li>Zeitstufen<br>  <img src="https://i.imgur.com/8ojQGto.png"></li></ul><h2 id="Passiversatz"><a href="#Passiversatz" class="headerlink" title="Passiversatz"></a>Passiversatz</h2><h3 id="Passiv-mit-Modalverben"><a href="#Passiv-mit-Modalverben" class="headerlink" title="Passiv mit Modalverben"></a>Passiv mit Modalverben</h3><ul><li>Passiv mit können (sollen&#x2F;müssen) &#x3D; <strong>sein + zu + Infinitiv</strong><ul><li>Beispiel:<ul><li>Die Experimente sind bereits von Kindergartenkindern durchzuführen.</li></ul></li></ul></li><li>Passiv mit können &#x3D; <strong>sich lassen + Infinitiv</strong><ul><li>Beispiel:<ul><li>Die Experimente lassen sich bereits von Kindergartenkindern durchzuführen.</li></ul></li></ul></li><li>Passiv mit können &#x3D; <strong>sein + Adjektiv（mit Endung -bar&#x2F;lich</strong>）<ul><li>Beispiel:<ul><li>Die Experimente sind bereits von Kindergartenkindern durchzuführbar.</li></ul></li></ul></li></ul>]]></content>
    
    
    <summary type="html">Die Notiz von Pasiv</summary>
    
    
    
    
    <category term="Deutsch" scheme="https://h123a456rr789y.github.io/tags/Deutsch/"/>
    
    <category term="Grammtik" scheme="https://h123a456rr789y.github.io/tags/Grammtik/"/>
    
  </entry>
  
  <entry>
    <title>Container</title>
    <link href="https://h123a456rr789y.github.io/2020/04/09/Container/"/>
    <id>https://h123a456rr789y.github.io/2020/04/09/Container/</id>
    <published>2020-04-09T06:43:02.000Z</published>
    <updated>2022-08-11T10:03:00.890Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Container"><a href="#Container" class="headerlink" title="Container"></a>Container</h1><h2 id="Outline"><a href="#Outline" class="headerlink" title="Outline"></a>Outline</h2><ul><li>Virtualization: machine level</li><li>Virtualization: OS level</li><li>FreeBSD jail</li><li>Docker</li></ul><h2 id="Virtualization-–-machine-level-Virtual-machine"><a href="#Virtualization-–-machine-level-Virtual-machine" class="headerlink" title="Virtualization – machine level - Virtual machine"></a>Virtualization – machine level - Virtual machine</h2><ul><li>Hardware virtualization<ul><li>Emulate CPU, RAM, HDD, Network Interface</li></ul></li><li>Host OS and Guest OS<ul><li>Isolated between each guest OS</li></ul></li><li>Hypervisor (KVM)<ul><li>QEMU, VirtualBox, VMWare…</li></ul></li><li>EC2, GCE<ul><li>Google Computed Engine</li></ul></li></ul><p><img src="https://i.imgur.com/HY4pz67.png"></p><ul><li>Intel VT-x and AMD-V<ul><li>CPU instructions to improve performance of virtualization</li><li>CPU and I&#x2F;O virtualization</li></ul></li><li>Pros<ul><li>Better use of IT resources</li><li>Elasticity</li></ul></li><li>Cons<ul><li>worse performance</li></ul></li></ul><h2 id="Virtualization-–-OS-level-Containers"><a href="#Virtualization-–-OS-level-Containers" class="headerlink" title="Virtualization – OS level - Containers"></a>Virtualization – OS level - Containers</h2><ul><li>Multiple isolated user space instances<ul><li>Shared Kernal</li><li>use the same operating system as the host one</li></ul></li><li>Containers can be live migrated (without restart service)</li></ul><p><img src="https://i.imgur.com/Vlz7Mhu.png"></p><ul><li>Technologies<ul><li>Docker – works on Windows, Mac OS X, and Linux as host OS</li><li>Jails – works on FreeBSD</li><li>LXC, OpenVZ</li></ul></li><li>Pros<ul><li>Better performance</li><li>Better Security</li><li>Use the same environment in development and production</li></ul></li><li>Cons<ul><li>Complex to understand</li></ul></li></ul><h2 id="FreeBSD-jail"><a href="#FreeBSD-jail" class="headerlink" title="FreeBSD jail"></a>FreeBSD jail</h2><ul><li>jail(8)</li><li><a href="https://www.freebsd.org/doc/handbook/jails.html#jails-synopsis">Detail of jail</a></li></ul><h2 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h2><h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><ul><li>Most popular OS level virtualization technology in the 2010s</li><li>Use different interfaces to access virtualization features of Linux kernel</li><li>Open sourced</li><li>Infrastructure as Code</li></ul><p><img src="https://i.imgur.com/Z7bT6d2.png"></p><h3 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h3><ul><li>Reuse pre-built images</li><li>Automate the process of building environment</li></ul><h3 id="Image-Layer"><a href="#Image-Layer" class="headerlink" title="Image Layer"></a>Image Layer</h3><ul><li>A writeable layer on top of a bunch of read-only layers</li><li>Each RUN has its own commit</li><li>Keep image as small as possible</li><li>overlayfs<ul><li>combining numerous directories into one directory<br><img src="https://i.imgur.com/uld53vF.png"></li></ul></li></ul><h2 id="Command-Lines"><a href="#Command-Lines" class="headerlink" title="Command Lines"></a>Command Lines</h2><ul><li><code>docker pull</code><ul><li>Pull an image from public or private repository</li></ul></li><li><code>docker build</code><ul><li>Build the image from Dockerfile</li></ul></li><li><code>docker run</code><ul><li>Run an instance</li></ul></li><li><code>docker kill</code><ul><li>Kill an instance</li></ul></li><li><code>docker rm</code><ul><li>Remove resource used by an instance</li></ul></li><li><code>docker ps</code> <ul><li>Show all instance</li></ul></li><li><code>docker push</code><ul><li>Push the image to docker repository</li></ul></li></ul><h2 id="Pros-and-Cons"><a href="#Pros-and-Cons" class="headerlink" title="Pros and Cons"></a>Pros and Cons</h2><ul><li>Pros<ul><li>Infrastructure as Code (IaC) simplify the operating effort</li></ul></li><li>Cons<ul><li>Security</li><li>Scalability</li></ul></li></ul>]]></content>
    
    
    <summary type="html">Introduction to container&#39;s concept and Docker</summary>
    
    
    
    
    <category term="SA Note" scheme="https://h123a456rr789y.github.io/tags/SA-Note/"/>
    
  </entry>
  
  <entry>
    <title>File System</title>
    <link href="https://h123a456rr789y.github.io/2020/04/08/File-System/"/>
    <id>https://h123a456rr789y.github.io/2020/04/08/File-System/</id>
    <published>2020-04-08T05:29:54.000Z</published>
    <updated>2022-08-11T10:03:00.890Z</updated>
    
    <content type="html"><![CDATA[<h1 id="File-System"><a href="#File-System" class="headerlink" title="File System"></a>File System</h1><h2 id="Files"><a href="#Files" class="headerlink" title="Files"></a>Files</h2><ul><li><code>ll</code> or <code>ls -l</code><br> <img src="https://i.imgur.com/1liqGj6.png"></li></ul><h2 id="File-System-Architecture"><a href="#File-System-Architecture" class="headerlink" title="File System Architecture"></a>File System Architecture</h2><ul><li><p>Application &lt;-&gt;Kernel &lt;-&gt; Hardware</p><ul><li>Applications call system-calls to request service</li><li>Kernel invokes corresponding drivers<br>  <img src="https://i.imgur.com/J12rOqP.png"></li></ul></li><li><p>Purpose of filesystem</p><ul><li>Represent and organize the system’s storage</li><li>Four main components:<ul><li>Namespace<ul><li>Naming things and arranging in a hierarchy</li></ul></li><li>API <ul><li>System calls for navigating and manipulating nodes</li></ul></li><li>Security model</li><li>Implementation</li></ul></li></ul></li><li><p>API – System Call – OS Relationship<br>  <img src="https://i.imgur.com/nMsIf8N.png"></p></li><li><p>Objects in the filesystem:</p><ul><li>Files and directories</li><li>Hardware device files</li><li>Processes information</li></ul></li><li><p>Pathname</p><ul><li>Absolute path(start with <code>/</code>)</li><li>Relative path(start from the current directory)</li></ul></li><li><p>Layout of File Systems</p><ul><li>hier(7)<br>  <img src="https://i.imgur.com/9LnFyA1.png"><br>  <img src="https://i.imgur.com/Qpyf6g4.png"></li></ul></li><li><p>Mounting file system</p><ul><li>mount(8)</li><li>“mount” command<ul><li>Map the mount point of the existing file tree to the root of the newly attached filesystem</li><li>The previous contents of the mount point become inaccessible</li><li>mount以後,像是任意門通到另一個世界，原本門後的空間就會看不到，unmount後才可看到原來門後的空間</li></ul></li><li>Filesystem table – fstab<ul><li>Automatically mounted at boot time</li><li>&#x2F;etc&#x2F;fstab<ul><li>Filesystem in this file will be checked and mounted automatically when booting</li></ul></li></ul></li><li>umount(8)</li><li>“umount” command<ul><li>Busy filesystem<ul><li>Someone’s current directory is there or there are opened files</li><li>Use “umount -f”</li><li>We can use <code>lsof</code> or <code>fstat</code> like utilities to figure out who makes it busy</li></ul></li></ul></li></ul></li><li><p>File Types<br>  <img src="https://i.imgur.com/th7idvc.png"></p><ul><li>Directory<ul><li>. and ..</li><li>mkdir &#x2F; rmdir</li></ul></li><li>UNIX domain socket<ul><li>Created by socket()</li><li>Be referenced through a filesystem object rather than a network port</li></ul></li><li>Symbolic Link<ul><li>A file which points to another pathname</li><li><code>ln -s</code> ori-file soft-file&#96;</li><li>Like “short-cut” in Windows</li></ul></li></ul></li></ul><h2 id="Inode-and-File"><a href="#Inode-and-File" class="headerlink" title="Inode and File"></a>Inode and File</h2><ul><li>inode<ul><li>A structure that records information of a file</li><li><code>ls -i</code> to see each file’s inode number</li></ul></li></ul><h2 id="Hard-Link-V-S-Symbolic-Link"><a href="#Hard-Link-V-S-Symbolic-Link" class="headerlink" title="Hard Link V.S. Symbolic Link"></a>Hard Link V.S. Symbolic Link</h2><ul><li>Hard link<ul><li>Associate two or more filenames with the same inode<ul><li>Must in the same partition</li></ul></li><li><code>ln ori-file hard-file</code></li></ul></li><li>Soft (symbolic) link<ul><li>A file which points to another pathname</li><li><code>ln -s ori-file soft-file</code></li></ul></li></ul><h2 id="File-Access-Mode"><a href="#File-Access-Mode" class="headerlink" title="File Access Mode"></a>File Access Mode</h2><ul><li>rwx r-x r-x<ul><li>User, group, other privileges</li></ul></li><li>chmod command<ul><li>change access authorities</li><li>chmod(1)</li></ul></li><li>setuid, setgid, sticky bit<ul><li>setuid, setgid on file<ul><li>The effective uid&#x2F;gid of resulting process will be set to the UID&#x2F;GID of the file</li></ul></li><li>setgid on directory<ul><li>Cause newly created files within the directory to be the same group as directory</li></ul></li><li>sticky on directory<ul><li>Do not allow to delete or rename a file unless you are<br>  – The owner of the file<br>  – The owner of the directory<br>  – root</li></ul></li></ul></li><li>Changing File Owner<ul><li>Commands:<ul><li>chown – change user owner</li><li>chgrp – change group owner</li></ul></li></ul></li></ul>]]></content>
    
    
    <summary type="html">Introduction to File system in FreeBSD</summary>
    
    
    
    
    <category term="SA Note" scheme="https://h123a456rr789y.github.io/tags/SA-Note/"/>
    
  </entry>
  
  <entry>
    <title>Periodic Processes</title>
    <link href="https://h123a456rr789y.github.io/2020/04/07/Periodic-Processes/"/>
    <id>https://h123a456rr789y.github.io/2020/04/07/Periodic-Processes/</id>
    <published>2020-04-07T10:47:50.000Z</published>
    <updated>2022-08-11T10:03:00.890Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Periodic-Processes"><a href="#Periodic-Processes" class="headerlink" title="Periodic Processes"></a>Periodic Processes</h1><h2 id="Goal-Do-things-at-right-time-automatically"><a href="#Goal-Do-things-at-right-time-automatically" class="headerlink" title="Goal: Do things at right time automatically"></a>Goal: Do things at right time automatically</h2><h2 id="Cron-daemon"><a href="#Cron-daemon" class="headerlink" title="Cron daemon:"></a>Cron daemon:</h2><ul><li>The daemon that handles periodic execution</li><li>Cron daemon reads configuration file and executes commands on<br>time</li><li>Details: Look up man cron(8), crontab(1), crontab(5)</li></ul><h2 id="Configuration-file"><a href="#Configuration-file" class="headerlink" title="Configuration file"></a>Configuration file</h2><ul><li><p>crontab</p></li><li><p>Location of <strong>user</strong> cron configuration file<br>  ![](<a href="https://i.imgur.com/8EdQzPs.png">https://i.imgur.com/8EdQzPs.png</a> &#x3D;400x200)</p></li><li><p>Location of <strong>System</strong> Cron Configuration file</p><ul><li><code>/etc/crontab</code></li></ul></li></ul><h2 id="Configuration-File-Format"><a href="#Configuration-File-Format" class="headerlink" title="Configuration File Format"></a>Configuration File Format</h2><p><img src="https://i.imgur.com/ScqbSAf.png"></p><ul><li><p>Rules:</p><ul><li><code>* </code>matches everything</li><li>Single character matches exactly</li><li>Dash(-) matches range</li><li>Comma(,) matches any listed value</li><li>Slash(&#x2F;) matches skips of the number’s value through the range</li></ul></li><li><p>Examples:</p></li><li><p>  <img src="https://i.imgur.com/KKUjZxR.png"></p></li><li><p>Special Sting or Time</p><p>  ![](<a href="https://i.imgur.com/V7HziEX.png">https://i.imgur.com/V7HziEX.png</a> &#x3D;400x300)</p></li></ul><h2 id="crontab-Command"><a href="#crontab-Command" class="headerlink" title="crontab Command"></a>crontab Command</h2><ul><li><code>crontab -e [-u user]</code><ul><li>Edit the [user’s] crontab using editor</li></ul></li><li><code>crontab -l</code><ul><li>List the content of the crontab</li></ul></li><li><code>crontab -r</code><ul><li>Remove the current crontab</li></ul></li></ul><h2 id="crontab-Management"><a href="#crontab-Management" class="headerlink" title="crontab Management"></a>crontab Management</h2><ul><li>To Allow or deny user from using cron daemon<ul><li>By default, all users can have their own crontab</li></ul></li><li>log<br>  ![](<a href="https://i.imgur.com/QKTI9xK.png">https://i.imgur.com/QKTI9xK.png</a> &#x3D;500x200)</li></ul><h2 id="System-crontab-x2F-etc-x2F-crontab"><a href="#System-crontab-x2F-etc-x2F-crontab" class="headerlink" title="System crontab: &#x2F;etc&#x2F;crontab"></a>System crontab: &#x2F;etc&#x2F;crontab</h2><p><img src="https://i.imgur.com/kl3sYRu.png"></p><h2 id="Periodic-Utility"><a href="#Periodic-Utility" class="headerlink" title="Periodic Utility"></a>Periodic Utility</h2><ul><li>Run periodic system function under <code>/etc/periodic</code></li><li><code>/etc/periodic.conf</code></li><li>For custom system programs: <code>/usr/local/etc/periodic</code></li><li>Execution order depends on filenames<ul><li>Use number as prefix to control the order</li></ul></li><li><code>/etc/periodic.conf</code></li></ul>]]></content>
    
    
    <summary type="html">Introduction to Periodic Processes and crontab</summary>
    
    
    
    
    <category term="SA Note" scheme="https://h123a456rr789y.github.io/tags/SA-Note/"/>
    
  </entry>
  
  <entry>
    <title>FTP</title>
    <link href="https://h123a456rr789y.github.io/2020/04/07/FTP/"/>
    <id>https://h123a456rr789y.github.io/2020/04/07/FTP/</id>
    <published>2020-04-07T10:47:12.000Z</published>
    <updated>2022-08-11T10:03:00.890Z</updated>
    
    <content type="html"><![CDATA[<h1 id="FTP"><a href="#FTP" class="headerlink" title="FTP"></a>FTP</h1><h2 id="Introdution-to-FTP"><a href="#Introdution-to-FTP" class="headerlink" title="Introdution to FTP"></a>Introdution to FTP</h2><ul><li><p>File Transfer Protocol</p></li><li><p>Used to transfer data from one computer to another over the internet</p></li><li><p>Client-Server Architecture</p></li><li><p>Separated control&#x2F;data connections</p><ul><li>Control connection:<ul><li>Created when an FTP session is established</li><li>Only for Control info</li></ul></li><li>Data connection:<ul><li>Each time that data is sent, a distinct TCP data connect is established</li></ul></li></ul></li><li><p>Security concern &amp; Solutions</p><ul><li>Need encryption for both Control and Data connection</li><li>S1:FTP over SSH<ul><li>A normal FTP session tunneled through a SSH channel</li></ul></li><li>S2:SSH File Transfer Protocol (SFTP)<ul><li>Both commands and data are encrypted while transmitting</li><li>One Connection and poor performance</li></ul></li><li>S3:FTP over TLS (ftps, ftpes)<ul><li>Only commands are encrypted while transmitting</li><li>Better performance</li></ul></li></ul></li></ul><h2 id="Pure-FTBd"><a href="#Pure-FTBd" class="headerlink" title="Pure-FTBd"></a>Pure-FTBd</h2><h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><ul><li>A small, easy to set up, fast and secure FTP server</li><li>Support chroot</li><li>FTP over TLS</li><li>Virtual Users, and Unix authentication</li><li>Restrictions on clients, and system-wide</li></ul><h3 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h3><ul><li>Use port or pkg install in Freebsd</li></ul><h3 id="Startup"><a href="#Startup" class="headerlink" title="Startup"></a>Startup</h3><ul><li>Add <code>pureftpd_enable=&quot;YES&quot;</code> in &#x2F;etc&#x2F;rc.conf</li></ul><h3 id="Configurations"><a href="#Configurations" class="headerlink" title="Configurations"></a>Configurations</h3><ul><li>File: <code>/usr/local/etc/pure-ftpd.conf</code></li></ul><h3 id="Tools-and-Commands"><a href="#Tools-and-Commands" class="headerlink" title="Tools and Commands"></a>Tools and Commands</h3><ul><li><code>pure-*</code></li><li><code>pure-ftpwho</code><ul><li>List info of users who are currently connecting to the FTP server.</li></ul></li><li><code>pure-pw</code><ul><li>Manage Virtual Users in PureDB format</li></ul></li></ul><h3 id="Real-Implimented-Products"><a href="#Real-Implimented-Products" class="headerlink" title="Real Implimented Products"></a>Real Implimented Products</h3><ul><li>FileZilla<ul><li>A graphical cross-platform FTP client</li><li>Support TLS</li></ul></li><li>Pure-FTPd WebUI<ul><li>PHP based web interface for Pure-FTPd</li></ul></li></ul><h3 id="Implimentation-Reference"><a href="#Implimentation-Reference" class="headerlink" title="Implimentation Reference"></a>Implimentation Reference</h3><ul><li><a href="http://mail.lsps.tp.edu.tw/~gsyan/freebsd2001/ftp-pureftpd.html">FTP 的架設─pure-ftpd</a></li><li><a href="https://yuuki1532.wordpress.com/2019/11/25/pure-ftpd-on-freebsd/">pure-ftpd作業實做細節</a></li></ul>]]></content>
    
    
    <summary type="html">Introduction to FTP and Pure-FTBd in FreeBSD</summary>
    
    
    
    
    <category term="SA Note" scheme="https://h123a456rr789y.github.io/tags/SA-Note/"/>
    
  </entry>
  
  <entry>
    <title>Konjunktiv II</title>
    <link href="https://h123a456rr789y.github.io/2020/04/07/KonjunktivII/"/>
    <id>https://h123a456rr789y.github.io/2020/04/07/KonjunktivII/</id>
    <published>2020-04-07T05:42:44.000Z</published>
    <updated>2022-08-11T10:03:00.890Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Konjunktiv-II"><a href="#Konjunktiv-II" class="headerlink" title="Konjunktiv II"></a>Konjunktiv II</h1><h2 id="Wozu-braucht-man-den-Konjunktiv-II"><a href="#Wozu-braucht-man-den-Konjunktiv-II" class="headerlink" title="Wozu braucht man den Konjunktiv II?"></a>Wozu braucht man den Konjunktiv II?</h2><p>Mit dem Konjunktiv II kann man ausdrücken, dass etwas irreal ist. </p><ul><li>Wünschen und Träume<ul><li>Ich würde gerne Urlaub machen.<br>-&gt; Ich mache keinen Urlaub.</li></ul></li><li>Möglichkeiten und irreale Bedingungen<ul><li>Der Pilz könnte giftig sein.</li><li>Wenn ich Zeit hätte, hätte ich den Film geschaut.<br>  -&gt; Ich habe keine Zeit.</li></ul></li><li>Warnungen und Vorschlagen<ul><li>An deiner Stelle würde ich disen Pilz nicht eseen.</li></ul></li><li>Höflichkeit<ul><li>Ich möchte gerne noch einen Kaffee bitte!</li></ul></li></ul><h2 id="Die-Bildung-in-der-Gegenwart"><a href="#Die-Bildung-in-der-Gegenwart" class="headerlink" title="Die Bildung in der Gegenwart"></a>Die Bildung in der Gegenwart</h2><h3 id="1-wurde-Infinitiv"><a href="#1-wurde-Infinitiv" class="headerlink" title="1. würde + Infinitiv"></a>1. würde + Infinitiv</h3><p><img src="https://i.imgur.com/PTrJ8uy.png"></p><ul><li>Beispiel:<ul><li>Meine Eltern würden mir ein neue Iphone nicht kaufen.<br>  -&gt;Ich kaufe mir ein neue Iphone.</li></ul></li></ul><h3 id="2-Verbformen-des-Konjunktiv-II"><a href="#2-Verbformen-des-Konjunktiv-II" class="headerlink" title="2.Verbformen des Konjunktiv II"></a>2.Verbformen des Konjunktiv II</h3><ul><li><p>Die Bildung des Konjunktivs II mit den Verbformen<br><img src="https://i.imgur.com/ET91Hip.png"></p></li><li><p>Verben, die häufig benutzt werden</p><p>  <img src="https://i.imgur.com/MWouXPj.png"><br>  <img src="https://i.imgur.com/SJysO8A.png"></p></li><li><p>Die Modalverben</p><p>  <img src="https://i.imgur.com/ozkOM5l.png"></p></li></ul><h2 id="Konjunktiv-II-in-der-Vergangenheit"><a href="#Konjunktiv-II-in-der-Vergangenheit" class="headerlink" title="Konjunktiv II in der Vergangenheit"></a>Konjunktiv II in der Vergangenheit</h2><h3 id="Als-Basis-der-Perfektform-“haben-x2F-sein-Partizip-II”"><a href="#Als-Basis-der-Perfektform-“haben-x2F-sein-Partizip-II”" class="headerlink" title="Als Basis der Perfektform: “haben &#x2F; sein + Partizip II”"></a>Als Basis der Perfektform: “haben &#x2F; sein + Partizip II”</h3><p><img src="https://i.imgur.com/tkV0fxE.png"></p><ul><li>Beispiele:<ul><li>Die Frau wäre nicht zu spät gekommen.</li><li>Der Mann hätte ein neues Auto gekauft.</li></ul></li></ul><h3 id="Konjunktiv-II-der-Vergangenheit-mit-Modalverben"><a href="#Konjunktiv-II-der-Vergangenheit-mit-Modalverben" class="headerlink" title="Konjunktiv II der Vergangenheit mit Modalverben"></a>Konjunktiv II der Vergangenheit mit Modalverben</h3><p><img src="https://i.imgur.com/cpzbLxV.png"></p><ul><li>Beispiele:<ul><li>Harryhätte gestern arbeiten müssen.</li><li>Lisahätte nach Deutschland fliegen dürfen.</li></ul></li></ul><h2 id="Konjunktiv-II-und-Passiv"><a href="#Konjunktiv-II-und-Passiv" class="headerlink" title="Konjunktiv II und Passiv"></a>Konjunktiv II und Passiv</h2><h3 id="Konjunktiv-II-der-Gegenwart-plus-Passiv"><a href="#Konjunktiv-II-der-Gegenwart-plus-Passiv" class="headerlink" title="Konjunktiv II der Gegenwart plus Passiv"></a>Konjunktiv II der Gegenwart plus Passiv</h3><p><img src="https://i.imgur.com/ErBPycR.png"></p><ul><li>Beispiele:<ul><li>Der Artikel würde bald korrigiert werden.</li><li>Die Tür würde jetzt geschlossen werden.</li></ul></li></ul><h3 id="Konjunktiv-II-der-Vergangenheit-plus-Passiv"><a href="#Konjunktiv-II-der-Vergangenheit-plus-Passiv" class="headerlink" title="Konjunktiv II der Vergangenheit plus Passiv"></a>Konjunktiv II der Vergangenheit plus Passiv</h3><p><img src="https://i.imgur.com/N76vXkv.png"></p><ul><li>Beispiele:<ul><li>Das Fenster wäregestern repariert worden.</li><li>Der Täterwäre gefunden worden.</li></ul></li></ul>]]></content>
    
    
    <summary type="html">Die Notiz von Konjunktiv II</summary>
    
    
    
    
    <category term="Deutsch" scheme="https://h123a456rr789y.github.io/tags/Deutsch/"/>
    
    <category term="Grammtik" scheme="https://h123a456rr789y.github.io/tags/Grammtik/"/>
    
  </entry>
  
  <entry>
    <title>Konjunktiv I und Indirekte Rede</title>
    <link href="https://h123a456rr789y.github.io/2020/04/07/Indirekte-Rede/"/>
    <id>https://h123a456rr789y.github.io/2020/04/07/Indirekte-Rede/</id>
    <published>2020-04-06T17:25:18.000Z</published>
    <updated>2022-08-11T10:03:00.890Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Indirekte-Rede"><a href="#Indirekte-Rede" class="headerlink" title="Indirekte Rede"></a>Indirekte Rede</h1><h2 id="Wofur-braucht-man-die-indirekte-Rede"><a href="#Wofur-braucht-man-die-indirekte-Rede" class="headerlink" title="Wofür braucht man die indirekte Rede?"></a>Wofür braucht man die indirekte Rede?</h2><p>Die Indirekte Rede wurde benuzt, wenn Sie die Aussagen anderer ausdrücken möchten. </p><p>Den Konjunktiv I benutzen wir im Deutschen für die indirekte Rede und diese Form wurde häufig in der Zeitung, in Nachrichten oder im Radio wervendet.</p><h2 id="Bildung-der-indirekten-Rede"><a href="#Bildung-der-indirekten-Rede" class="headerlink" title="Bildung der indirekten Rede"></a>Bildung der indirekten Rede</h2><ul><li>Es gibt im Deutschen zwei wichtige Werkzeuge, mit denen man fremde Gedanken kenntlich machen kann:<ol><li>Der Gebrauch von so genannten Verben der Mitteilung (sagen, meinen, behaupten etc.) in Verbindung mit einem Nebensatz.</li><li>Der Gebrauch des Konjunktiv I</li></ol></li></ul><p><strong>Beispiel:</strong> </p><ul><li><p>Der Mathelehrer sagt “ Die Mathematik ist gar nicht so einfach.”</p><p>  -&gt; Der Matheklehrer sagt, dass die Mathematik gar nicht so einfach <strong>sei</strong>.</p><p>  Es funktioniert auch ohne Nebensatz:</p><p>  -&gt; Der Mathelehrer sagt, die Mathematik <strong>sei</strong> gar nicht so einfach .</p></li></ul><p><strong>Weitere Beispiel:</strong> </p><ul><li><p>Der Matheklehrer sagt, dass die Mathematik gar nicht so einfach <strong>sei</strong>. Man <strong>müsse</strong> die richtige Lerntechnik benutzen und viel mit dem Kopf denken.</p><p>  Die ‘müsse’ ist Kon. I. Es bedeutet der Satz ist immer noch die Meinung von dem MatheLeherer.</p></li></ul><h2 id="Bildung-des-Konjunktiv-I"><a href="#Bildung-des-Konjunktiv-I" class="headerlink" title="Bildung des Konjunktiv I"></a>Bildung des Konjunktiv I</h2><p>Die Regel für <strong>schwache</strong> Verben lautet:<br><img src="https://i.imgur.com/MKDUVXX.png"></p><p><strong>Beispiele:</strong></p><p><img src="https://i.imgur.com/pTRog1L.png"></p><p><img src="https://i.imgur.com/5jAyqip.png"></p><p><img src="https://i.imgur.com/RkJLaZA.png"></p><p><strong>Für spezialen Verben:</strong></p><p><img src="https://i.imgur.com/WRx3O0r.png"></p><p><strong>Beispiel:</strong> </p><p>Der Politiker sagte, er habe das nicht gewusst.</p><h2 id="Die-Wurde-Form"><a href="#Die-Wurde-Form" class="headerlink" title="Die Würde-Form"></a>Die Würde-Form</h2><p>Ist die Verbform im Kon. I identisch mit dem Indikativ so verwendet man die Formen des Kon. II </p><p><img src="https://i.imgur.com/V36MJER.png"></p><p><strong>Beispiele:</strong> </p><ul><li><p>Gestern haben Paul und Erica gesagt, dass sie nächste Woche nach Deutschland gehen. Sie lernen dort Deutsch.</p><p>  -&gt; Gestern haben Paul und Erica gesagt, dass sie nächste Woche nach Deutschland gehen. Sie <strong>würden</strong> dort Deutsch <strong>lernen</strong>.</p></li><li><p>Diese Partei wähle ich nicht! Die Vorsitzenden lügen oft.</p><p>  Weil die Form Kon. I identisch mit dem Indikativ ist(lügen), kann man die als Kon. II verwenden oder auch die würden Form benutzen.</p><p>  -&gt; Paul sagt, dass er diese Parei nicht <strong>wähle</strong>. Die Vorsitzenden <strong>lögen</strong> oft.  </p><p>  <strong>oder:</strong><br>  -&gt; Paul sagt, dass er diese Parei nicht <strong>wähle</strong>. Die Vorsitzenden <strong>würden</strong> oft lögen.  </p></li><li><p>Diese Partei wähle ich nicht! Die Vorsitzenden lernen nicht aus ihren Fehlen.<br>  -&gt; <del>Paul sagt, dass er diese Parei nicht <strong>wähle</strong>. Die Vorsitzenden <strong>lernten</strong> nicht aus ihren Fehlen .</del></p><p>  <strong>Hier soll man nicht ´lernten´ benutzen, denn das Indiktiv(Präteritum) ist identisch wie Kon. I</strong></p><p>  -&gt; Paul sagt, dass er diese Parei nicht <strong>wähle</strong>. Die Vorsitzenden <strong>würden</strong> nicht aus ihren Fehlen <strong>lernen</strong>.</p></li></ul>]]></content>
    
    
    <summary type="html">Die Notiz von indirekte Rede in Deutsch</summary>
    
    
    
    
    <category term="Deutsch" scheme="https://h123a456rr789y.github.io/tags/Deutsch/"/>
    
    <category term="Grammtik" scheme="https://h123a456rr789y.github.io/tags/Grammtik/"/>
    
  </entry>
  
  <entry>
    <title>Service and Setting</title>
    <link href="https://h123a456rr789y.github.io/2020/04/06/Service-and-Setting/"/>
    <id>https://h123a456rr789y.github.io/2020/04/06/Service-and-Setting/</id>
    <published>2020-04-06T13:26:13.000Z</published>
    <updated>2022-08-11T10:03:00.890Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Services-amp-Settings"><a href="#Services-amp-Settings" class="headerlink" title="Services &amp; Settings"></a>Services &amp; Settings</h1><h2 id="Services"><a href="#Services" class="headerlink" title="Services"></a>Services</h2><ul><li>Commen Flow of Runing a Service <ol><li>Installation:<ul><li>Through ports, packages, or source tarballs<ul><li><code>pkg install kde4</code></li></ul></li></ul></li><li>Configuration<ul><li>Update &#x2F;etc&#x2F;rc.conf<ul><li><code>kdm4_enable=&quot;YES”</code></li></ul></li><li>service kdm4 enable</li></ul></li><li>Start<ul><li>rc.d&#x2F;*<ul><li>&#x2F;usr&#x2F;local&#x2F;etc&#x2F;rc.d&#x2F;kdm4 start</li></ul></li><li>service kdm4 start</li></ul></li><li>Maintenance<ul><li>Updating and Restarting</li></ul></li></ol></li><li>Configuration File<ul><li>Local installed programs’ configuration files are located under &#x2F;usr&#x2F;local&#x2F;etc<ul><li>Daemon → program-name.conf<ul><li>pure-ftpd.conf</li></ul></li><li>user-program → program-name<strong>rc</strong><ul><li>vimrc</li><li>screenrc</li></ul></li></ul></li><li>Default config file usually installed with .sample or .default suffix<ul><li>copy and rename before use it</li></ul></li></ul></li><li>A program with multiple config files are usually located in &#x2F;usr&#x2F;local&#x2F;etc&#x2F;program-name&#x2F; in a directory <ul><li>apache*</li></ul></li></ul><h2 id="RC-Script"><a href="#RC-Script" class="headerlink" title="RC Script"></a>RC Script</h2><ul><li>Scripts for starting &#x2F; stopping a service</li><li>Command scripts for auto-reboot and daemon startup</li><li>Start services on system startup</li><li>Starting and Stopping services in a standard way<ul><li>Without rc:<ul><li><code>usr/local/sbin/pure-ftpd -g /var/run/pure-ftpd.pid -A -c50 -B -C8 -D -fftp -H -I15 -lpam -lunix -L10000:8 -m4 -s -U133:022 -u100 -k99 -Z</code></li></ul></li><li>With rc:<ul><li><code>service pure-ftpd start</code></li></ul></li></ul></li><li>Launch daemon processes<ul><li>Launch<ul><li>Path to the executable binary&#x2F;script</li><li>&#x2F;usr&#x2F;sbin&#x2F;inetd</li></ul></li><li>Configuration<ul><li>Program-specified configuration</li><li>&#x2F;etc&#x2F;inetd.conf</li></ul></li><li>Pidfile<ul><li>Records (master) process id of the service</li><li>&#x2F;var&#x2F;run&#x2F;inetd.pid</li></ul></li></ul></li><li>Use rc scipt <ul><li>ex:ntpd<br>  <img src="https://i.imgur.com/9iqnCtb.png"></li><li>as rc.conf<br>  <img src="https://i.imgur.com/vvoJIS4.png"></li><li>An easy way to access: “service”<ul><li>$ service ntpd start&#x2F;stop&#x2F;restart&#x2F;reload&#x2F;…<ul><li>Search &#x2F;etc&#x2F;rc.d and &#x2F;usr&#x2F;local&#x2F;etc&#x2F;rc.d</li></ul></li></ul></li><li>Start<ul><li>start the service and write PID files now</li></ul></li><li>Stop<ul><li>killing the process with PID</li></ul></li><li>Restart<ul><li>Restart the service</li></ul></li><li>Enable&#x2F;Disable<ul><li>Edit &#x2F;etc&#x2F;rc.conf with XXX_enable&#x3D;“YES” or “NO”</li></ul></li><li>Reload<ul><li>Reload configuration file</li></ul></li><li>Status<ul><li>Check the service is running or not</li></ul></li></ul></li><li>Local installed service<ul><li>More about how to use rc.conf for an installed service, read comments from that script</li><li>&#x2F;usr&#x2F;local&#x2F;etc&#x2F;rc.d&#x2F;pure-ftpd<br><img src="https://i.imgur.com/LVTVgCs.png"></li></ul></li></ul>]]></content>
    
    
    <summary type="html">Introduction to service and configuration setting in FreeBSD</summary>
    
    
    
    
    <category term="SA Note" scheme="https://h123a456rr789y.github.io/tags/SA-Note/"/>
    
  </entry>
  
  <entry>
    <title>User Management</title>
    <link href="https://h123a456rr789y.github.io/2020/04/06/User-Management/"/>
    <id>https://h123a456rr789y.github.io/2020/04/06/User-Management/</id>
    <published>2020-04-06T10:08:37.000Z</published>
    <updated>2022-08-11T10:03:00.890Z</updated>
    
    <content type="html"><![CDATA[<p>#User Management</p><h2 id="Adding-New-Users"><a href="#Adding-New-Users" class="headerlink" title="Adding New Users"></a>Adding New Users</h2><h3 id="ID"><a href="#ID" class="headerlink" title="ID"></a>ID</h3><ul><li>User ID, Group ID<br><img src="https://i.imgur.com/5OxtuSc.png"></li><li>Root<br><img src="https://i.imgur.com/dI6qwcE.png"></li><li>Other Important Users<ul><li>daemon: owner of unprivileged software</li><li>bin: owner of system commands</li><li>sys: owner of the kernel and memory images</li><li>nobody: owner of nothing</li></ul></li></ul><h3 id="Steps-to-add-new-user"><a href="#Steps-to-add-new-user" class="headerlink" title="Steps to add new user"></a>Steps to add new user</h3><ol><li>Edit the password and group files -&gt;<code>vipw, pw</code></li><li>Set an initial password -&gt;<code>password harry</code></li><li>Set quota -&gt;<code>edquota harry</code></li><li>Create user home directory -&gt;<code>mkdir /home/harry</code></li><li>Copy startup files to user’s home (optional)</li><li>Set the file&#x2F;directory owner to the user -&gt;<code>chown -R harry:dcs /home/harry</code></li></ol><h3 id="password-and-group-file"><a href="#password-and-group-file" class="headerlink" title="password and group file"></a>password and group file</h3><ul><li><p>&#x2F;etc&#x2F;passwd</p><ul><li>Store user information:<ul><li>Login name</li><li>Encrypted password (* or x)</li><li>UID</li><li>Default GID</li><li>GECOS information<ul><li>Full name, office, extension, home phone</li></ul></li><li>Home directory</li><li>Login shell<br><img src="https://i.imgur.com/cgSW3qc.png"></li></ul></li></ul></li><li><p>Encrypted password</p><ul><li>The encrypted password is stored in shadow file for security reason</li><li>&#x2F;etc&#x2F;master.passwd (BSD)</li><li>&#x2F;etc&#x2F;shadow (Linux)<br><img src="https://i.imgur.com/Rlx1iUM.png"></li></ul></li><li><p>&#x2F;etc&#x2F;group</p><ul><li>Contains the names of UNIX groups and a list of each group’s member:</li><li>Group name</li><li>Encrypted password</li><li>GID</li><li>Only in wheel group can do “su” command<br><img src="https://i.imgur.com/qLL4TTS.png"></li></ul></li><li><p>In FreeBSD</p><ul><li>Use “vipw” to edit &#x2F;etc&#x2F;master.passwd</li></ul></li><li><p>In Linux</p><ul><li>Edit &#x2F;etc&#x2F;passwd and then</li><li>Use “pwconv” to transfer into &#x2F;etc&#x2F;shadow</li></ul></li></ul><h3 id="Remove-accounts"><a href="#Remove-accounts" class="headerlink" title="Remove accounts"></a>Remove accounts</h3><ul><li>Delete the account entry<ul><li>[FreeBSD] vipw, pw userdel</li><li>[Linux] remove the row in &#x2F;etc&#x2F;passwd and pwconv</li></ul></li><li>Backup file and mailbox<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tar jcf harry-home-20190927.tar.bz /home/harry</span><br><span class="line">tar jcf harry-mail-20190927.tar.bz /var/mail/harry</span><br><span class="line">chmod 600 liyu-*-20190927.tar.bz</span><br></pre></td></tr></table></figure></li><li>Delete home directory and mailbox<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rf /home/harry /var/mail/harry</span><br></pre></td></tr></table></figure></li></ul><h2 id="Rootly-Powers"><a href="#Rootly-Powers" class="headerlink" title="Rootly Powers"></a>Rootly Powers</h2><ul><li><p>Root</p><ul><li>Root is God, A.K.A. super-user.</li><li>UID is 0</li></ul></li><li><p>UNIX permits super-user to perform any valid operation on any file or process, such as:</p><ul><li>Changing the root directory of a process with chroot</li><li>Configuring network interfaces (ifconfig command)</li><li>Shutting down the system (shutdown command)</li><li>…</li></ul></li><li><p>Login as root</p><ul><li>Remote login (login via ssh)</li><li>sshd:&#x2F;etc&#x2F;ssh&#x2F;sshd_config  -&gt; <strong>insecure</strong><br>  <code>#PermitRootLogin yes</code></li></ul></li><li><p>su : substitute user identity</p><ul><li>su, su -, su username</li></ul></li><li><p>sudo : a limited su (security&#x2F;sudo)</p><ul><li>Subdivide superuser’s power<ul><li>Who can execute what command on which host as whom.</li></ul></li><li>Each command executed though sudo will be logged (&#x2F;var&#x2F;log&#x2F;auth.log) -&gt; trackable</li></ul></li><li><p>sudoers</p><ul><li>Who can execute what command on which host as whom</li><li>modify <code>/etc/sudoers</code> to allow new authorities</li><li>can use <code>visudo</code> to edit<br><img src="https://i.imgur.com/i3B0Cxn.png"></li></ul></li></ul>]]></content>
    
    
    <summary type="html">Introduction to user management in FreeBSD and Linux</summary>
    
    
    
    
    <category term="SA Note" scheme="https://h123a456rr789y.github.io/tags/SA-Note/"/>
    
  </entry>
  
  <entry>
    <title>Git</title>
    <link href="https://h123a456rr789y.github.io/2020/04/06/git/"/>
    <id>https://h123a456rr789y.github.io/2020/04/06/git/</id>
    <published>2020-04-06T03:54:22.000Z</published>
    <updated>2022-08-11T10:03:00.890Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h1><h2 id="Git-基礎概念"><a href="#Git-基礎概念" class="headerlink" title="Git 基礎概念"></a>Git 基礎概念</h2><h3 id="Git-版本控制"><a href="#Git-版本控制" class="headerlink" title="Git 版本控制"></a>Git 版本控制</h3><ul><li>為了解決的問題：<ul><li>程式修改過後紀錄麻煩</li><li>怕程式改錯又要重改，又改不回來</li><li>多人合作Project時程式容易被覆蓋</li></ul></li><li>git 使用分散式版本控制系統<br><img src="https://i.imgur.com/0jyhvjX.png"><ul><li>起初是 Linus torvalds大師為了要控制linux kernel版本而去開發的工具</li></ul></li><li>git 優點<ul><li>檔案的狀態（status）作為更新歷史記錄保存</li><li>可以復原到以前的檔案狀態</li><li>可以顯示編輯過後內容的差異</li></ul></li></ul><h3 id="用-Repository-來管理歷史紀錄"><a href="#用-Repository-來管理歷史紀錄" class="headerlink" title="用 Repository 來管理歷史紀錄"></a>用 Repository 來管理歷史紀錄</h3><ul><li>Repository功能<ul><li>記錄檔案或目錄狀態</li><li>儲存內容的歷史修改記錄</li><li>追蹤內容的狀態和版本</li></ul></li><li>Local Repository and Remote Repository <ul><li>Local Repository:<ul><li>給大家一起分享的 配有伺服器</li></ul></li><li>Remote Repository:<ul><li>方便用個人用</li></ul></li></ul></li><li>Create Repo<ul><li>在local端建立並init Repo</li><li>pull from遠端的 Repo</li></ul></li></ul><h3 id="Git-Commit"><a href="#Git-Commit" class="headerlink" title="Git Commit"></a>Git Commit</h3><ul><li>用 git commit 可以把新增的東西丟到Repo中</li><li>執行完 commit後 Repo會產生一個Revision來紀錄新版舊版間的差異</li><li>Tip:不同含意的更改盡量可以分開來提交以便日後查看（ex:debug, new function）</li><li>Tip: Commit時提交訊息應包含<ul><li>修改內容的摘要</li><li>修改的理由</li></ul></li></ul><h3 id="Working-Tree-and-Index（Staging-Area）"><a href="#Working-Tree-and-Index（Staging-Area）" class="headerlink" title="Working Tree and Index（Staging Area）"></a>Working Tree and Index（Staging Area）</h3><ul><li>Working Tree 負責保存目前正在處理檔案的目錄還有git 指令的相關操作</li><li>Index（Staging Area）是當在交到remote Repo間的一個檔案暫存區</li></ul><h2 id="開使用-Git"><a href="#開使用-Git" class="headerlink" title="開使用 Git"></a>開使用 Git</h2><h3 id="Prerequisite"><a href="#Prerequisite" class="headerlink" title="Prerequisite"></a>Prerequisite</h3><ul><li>Create a Github Account</li><li>Git Install </li><li>gitk 可用GUI來確認提交歷史 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Sudo apt install git</span><br></pre></td></tr></table></figure></li></ul><h3 id="Git-環境設定"><a href="#Git-環境設定" class="headerlink" title="Git 環境設定"></a>Git 環境設定</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;Github-user-name&quot;</span><br><span class="line">git config --global user.email &quot;Github-uesd-email&quot;</span><br><span class="line">git config --global color.ui true</span><br><span class="line">git config --global core.editor vim</span><br><span class="line">git config --global alias.co commit</span><br><span class="line">git config --global alias.lg &quot;log --color --graph --all --pretty=format:&#x27;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&#x27; --abbrev-commit --&quot;</span><br></pre></td></tr></table></figure><h3 id="Create-Repo"><a href="#Create-Repo" class="headerlink" title="Create Repo"></a>Create Repo</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir test</span><br><span class="line">cd test</span><br><span class="line">git init</span><br></pre></td></tr></table></figure><ul><li>建一個資料夾並進去裡面做 initialization</li></ul><h3 id="Commit-Files"><a href="#Commit-Files" class="headerlink" title="Commit Files"></a>Commit Files</h3><ul><li>用來看Work Tree 和 Index 狀態<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure></li><li>將檔案加入Index （Staging Area）<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git add &lt;file&gt;</span><br><span class="line"></span><br><span class="line">##Add all files</span><br><span class="line">git add.    </span><br></pre></td></tr></table></figure></li><li>若檔案有更改 或需要比較檔案差別<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#可用比較兩次上傳檔案之間的差別</span><br><span class="line"> git diff</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>上傳檔案到remote Repo<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># -m代表要丟上去給別人看的訊息 commit message</span><br><span class="line">git commit -m &quot;origin master&quot;</span><br></pre></td></tr></table></figure></li><li>看歷史提交紀錄<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log</span><br></pre></td></tr></table></figure></li></ul><h2 id="Shared-Ropo"><a href="#Shared-Ropo" class="headerlink" title="Shared Ropo"></a>Shared Ropo</h2><ul><li>Push :到遠端的Repo</li><li>Clone:從遠端的Repo複製檔案</li><li>Pull :同步遠端的Repo 來更新本地的Repo</li></ul><h3 id="連結到遠端-Repo"><a href="#連結到遠端-Repo" class="headerlink" title="連結到遠端 Repo"></a>連結到遠端 Repo</h3><ul><li><p>在Github創一個新的 Repo 並且勾選不用<code>.gitignore</code> <code>README.md</code> <code>LICENSE</code>如下</p></li><li><p><code>.gitignore</code> 是用來管理不想被丟上去的東西,<code>README.md</code> 則是做紀錄的檔案<br><img src="https://i.imgur.com/4AujKtA.png"></p></li><li><p>去複製自己的 在Github 上的 Repository的 ssh 網址如下<code>git@github.com:username/git_test.git</code><br><img src="https://i.imgur.com/pVxnuVp.png"></p></li><li><p>用以下指令將本地端的資料夾和遠端Repo連結</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin git@github.com:username/git_test.git</span><br></pre></td></tr></table></figure></li><li><p>並使用以下指令來將檔案push 上去遠端 Repo</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure></li><li><p>通常系統會要求輸入你的遠端帳護名稱和密碼,可用以ssh-keygen來省下每次都要輸入密碼的麻煩</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#產生你電腦的公鑰私鑰</span><br><span class="line"></span><br><span class="line">ssh-keygen -t rsa -b 4096 -C &quot;your_email@gmail.com&quot;</span><br><span class="line"></span><br><span class="line">#所生成的公鑰和私鑰在 ~/.ssh/目錄下  id_rsa 和id_rsa.pub中</span><br><span class="line"></span><br><span class="line">#複製公鑰中的內容</span><br><span class="line">cat ~/.ssh/id_rsa.pub </span><br></pre></td></tr></table></figure><p>隨後到GitHub網頁的Setting上新增你的Public SSH key<br><img src="https://i.imgur.com/rx0jB0G.png"></p></li><li><p>用git clone指令來複製遠端的Repo</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone &lt;repository&gt; &lt;directory&gt;</span><br><span class="line">#ex: git clone https://github.com/h123a456rr789y/HackMD_Note.git HackMD_Note</span><br></pre></td></tr></table></figure></li><li><p>用git pull指令來同步遠端的Repo</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git pull &lt;repository&gt; &lt;refspec&gt;</span><br><span class="line">## git pull origin master</span><br></pre></td></tr></table></figure></li></ul><h2 id="處理合併修改紀錄"><a href="#處理合併修改紀錄" class="headerlink" title="處理合併修改紀錄"></a>處理合併修改紀錄</h2><ul><li>如果你在push前，有其他人push 更新了遠端的Repo而沒有更新到你的本地端，你的push就會失敗，此時就需要合併在push上去</li><li>解決方法:<ul><li>先pull在push:用rebase的方式合併(不是萬能) 如果不行則需手動合併<br>  <code>git pull --rebase</code></li><li>不管他的強制push我現在的上去: -f 是強制的意思 (<strong>別亂用</strong>)<br>  <code>git push -f</code></li></ul></li></ul><h3 id="Rebase-合併補充"><a href="#Rebase-合併補充" class="headerlink" title="Rebase 合併補充"></a>Rebase 合併補充</h3><ol><li>會先把本地 repo. 從上次 pull 之後的變更暫存起來 </li><li>回復到上次 pull 時的情況 </li><li>套用遠端的變更 </li><li>最後再套用剛暫存下來的本地變更<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#合併前</span><br><span class="line">      D---E--F master</span><br><span class="line">     /</span><br><span class="line">A---B---C---G origin/master</span><br><span class="line"></span><br><span class="line">#Rebase 合併</span><br><span class="line"></span><br><span class="line">A---B---C---G---D&#x27;---E&#x27;---F&#x27;   master, origin/master</span><br><span class="line"></span><br><span class="line">#merge 合併  </span><br><span class="line"></span><br><span class="line">      D---E----F </span><br><span class="line">     /          \</span><br><span class="line">A---B---C---G----H   master, origin/master</span><br></pre></td></tr></table></figure></li></ol><ul><li>所以一旦出現conflict 就無法執行rebase，需要手動修復後，然後才可以繼續動作</li><li>merge 如果發生 conflict，你只需要解決衝突一次，合成一個新，然後就可 commit 出去<blockquote><p>改得比較多 -&gt; 會有較多的 conflict -&gt; merge<br>改得比較少 -&gt; 會有較少的 conflict -&gt; rebase</p></blockquote></li></ul><h2 id="分支Branch"><a href="#分支Branch" class="headerlink" title="分支Branch"></a>分支Branch</h2><ul><li>將修改記錄的整體流程分開儲存，讓分開的分支不受其他分支的影響，所以在同一個數據庫裡可以同時進行多個不同的修改</li><li>分支間可以合併</li></ul><h3 id="分支的運用"><a href="#分支的運用" class="headerlink" title="分支的運用"></a>分支的運用</h3><ul><li>Integration分支(主要的分支):保持穩定是很重要的，因為新的分支會建立在它的上面，而且Integration分支是為了可以隨時建立發布版本的分支</li><li>Topic分支(次要分支):Topic分支是為了<strong>開發功能</strong>或<strong>修復錯誤</strong>之類的任務所建立的分支。若同時進行多個任務時，您必須建立多個的Topic分支，修改完後再將Topic分支合併到Intergration分支</li></ul><h3 id="分支的切換"><a href="#分支的切換" class="headerlink" title="分支的切換"></a>分支的切換</h3><ul><li>用 <code>checkout</code>指令:工作目錄裡的檔案會根據切換到不同的分支而呈現該分支最後提交的內容</li><li>HEAD代表當前分支的最新提交名稱</li></ul>]]></content>
    
    
    <summary type="html">Git notes and version control concept</summary>
    
    
    
    
    <category term="CSTools" scheme="https://h123a456rr789y.github.io/tags/CSTools/"/>
    
  </entry>
  
  <entry>
    <title>Isi und Ossi</title>
    <link href="https://h123a456rr789y.github.io/2020/04/05/isi-und-ossi/"/>
    <id>https://h123a456rr789y.github.io/2020/04/05/isi-und-ossi/</id>
    <published>2020-04-05T14:40:52.000Z</published>
    <updated>2022-08-11T10:03:00.890Z</updated>
    
    <content type="html"><![CDATA[<p>‚Isi und Ossi‘ ist eine deutsche Liebeskomödie aus dem Jahr 2020. Es handelt sich um die erste deutsche Netflix-Film-Eigenproduktion. Die Hauptrollen verköpern Lisa Vicari und Dennis Mojen und der Film wurde von Oliver Kienle produziet. </p><p><img src="https://i.imgur.com/TV9vFuK.jpg"></p><p>Isi kommt aus einer sehr reichen Familie in Heidelberg, die sich gar nicht für die Zukunft sorgen muss. Jedoch möchte sie eine Kochausbildung in New York machen und eine Köchin werden, sodass ihre Eltern sich in den Weg stellen und sie ein BWL Studium erwarten. Im Gegensazt kommt Ossi aus einer pleiten Familie in Mannheim. Seine Mutter besiztet eine Tankstelle und hat viele Schulden. Sein Großvater ist ein verwahrloster Krimineller, der neulich aus einem Gefängis entlassen wurde. Aufgrund der Geldprobleme konnte er seinen Traum als professioneller Boxer nicht ermöglichen. Als die beiden sich zufällig begegnen, verfolgt Isi den Plan, dass Ossi sich vor ihren Eltern als asozialer Freund benehmen soll, um diese zu erpressen. Dafür finanziert Isi ihm seinen Kampf, der Eintritt in die Profiliga, und rettet die Tankstelle seiner Mutter vor dem Bankrott. Was als Spiel beginnt, wird jedoch plöztlich ernst, sie haben sich darüber hinaus tatsächlich ineinander verliebt und sind durcheinander. Was wichtiger ist: Liebe oder Karriere? Letztendlich, hat Isi nach einigen Verwicklungen auf die Kochausbildung verzichtet und stattdessen hat sie einen Burgerladen aufgekauft. Ossi hat schließlich den Kampf gewonnen und die Geschichte zwischen dem süßen Paar entfaltet sich auf eine ungewisse Zukunft. </p><p><img src="https://i.imgur.com/KOMNYtw.jpg"></p><p>Die Szene, in welcher Isi auffortdert „Kannst du mich bitte richtig asozial küssen“, ist total süß. Obwohl die Karriere, die Familiehintergründe und die Personalität so ungleich sind, die beiden haben sich einfach so verliebt. Es geht darum, dass die Hauptsache der Liebe immer das authentische Gefühl ist, wenn du extrem reich bist oder dein Partner bzw. Partnerin extrem reicht ist.</p>]]></content>
    
    
    <summary type="html">Die Zusammenfassung von dem Film ‚Isi und Ossi‘</summary>
    
    
    
    
    <category term="Deutsche Artikel" scheme="https://h123a456rr789y.github.io/tags/Deutsche-Artikel/"/>
    
  </entry>
  
  <entry>
    <title>學習一個第二外語 --- 德文</title>
    <link href="https://h123a456rr789y.github.io/2020/03/30/%E5%AD%B8%E7%BF%92%E5%BE%B7%E6%96%87/"/>
    <id>https://h123a456rr789y.github.io/2020/03/30/%E5%AD%B8%E7%BF%92%E5%BE%B7%E6%96%87/</id>
    <published>2020-03-30T11:54:32.000Z</published>
    <updated>2022-08-11T10:03:00.890Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一切的開始-—-啟蒙"><a href="#一切的開始-—-啟蒙" class="headerlink" title="一切的開始  —  啟蒙"></a>一切的開始  —  啟蒙</h1><p>2013年時我計畫透過扶輪社的交換到德國交換一年，在這趟遠征之前，對德文完全沒接觸過的我，決定為了這個交換到高雄文藻外語學院開的德文課去上一期A1的基礎課。<br>為期10堂課一次2小時的基礎德文課，是我開始接觸德國文化、學習字母、發音的開始，透過對於這些文化的了解萌發我對德國與德語的興趣，也學習到了一些簡單的詞彙及句子，一期的課很快結束了，準備踏上德國交換的旅程，是該來驗證自己學習成果的時候了。</p><h1 id="交換的開始-—-試煉"><a href="#交換的開始-—-試煉" class="headerlink" title="交換的開始 — 試煉"></a>交換的開始 — 試煉</h1><p>在經過18個小時漫長的旅程，我終於抵達了德國的寄宿家庭在德國西北部(Esens)旁的一個村子Stedesdorf，起初我像所有交換生期待著接待家庭很有耐心的用英文跟我溝通，慢慢的學習並熟悉這個文化及語言，但是我的轟家並沒有給我太多喘息的空間,並告訴我，他們在兩周之後除了重要的事情外只會與我用德語對話，這是一顆傑克的豌豆，種在我的心底並且迫使著我即將要有突破天際的成長，然而我的轟家在對於我期許的同時，也給予我很多的幫助以及一些小方法，並且很願意在百忙中花時間跟我溝通、聊天、講解、教學。</p><p>![](<a href="https://i.imgur.com/HtxfFPy.pngv">https://i.imgur.com/HtxfFPy.pngv</a> &#x3D;400x300)</p><p>記得在我一抵達轟家的時候，餐廳、房間、客廳貼著各個東西<strong>單字的小紙條</strong>，他們也在帶我熟悉家裡環境時認識了這些單字，每次看到就練習一次，一周後我就將這些單字全部記了起來。此外，我的轟家也很用心的為我準備<strong>兒童故事書及兒童CD</strong>，並且囑咐我在學習時可以將文字<strong>大聲唸出來</strong>，在睡前聆聽CD並聆聽入睡，這樣可以有助於在睡眠時持續大腦的潛在學習，同時也可以增加對於<strong>語言的感覺</strong>。除此之外，我使用了 Rosetta Stone 的線上學習語言網站，且在每個晚上練習約一個小時，同時我也使用<a href="https://www.leo.org/">LEO線上字典</a>來查我不會的單字，並且使用一頁可以寫約5個單字小筆記本來記錄我學習到的新單字們。</p><p>![](<a href="https://i.imgur.com/tA2DgDr.png">https://i.imgur.com/tA2DgDr.png</a> &#x3D;300x)</p><p>在學校，我當時在德國較好的高中(Gymnasium)的十年級就讀，我的轟家會要求我積極參與學校的課程與考試，記得第一天放學回家，轟媽問我:學校有沒有派任何作業，我回道:有一篇生物的文章要讀，我記得那是一個有關演化論的文章，我才到德國一周，連一些基本的單字都還不會，但我還是硬著頭皮把所有單字查完了，不經感嘆:「人生真難，但德文更難阿!」，此外，學校的考試也令我頭疼，我只能試著將我會的拼湊成句子寫成文章，數學物理化學還稍微有點頭緒，而其他需要文字來表達想法的科目令我挫折，但幸運的是，我的轟家很願意花時間教我，告訴我德國人如何寫一篇文章的思維以及想法。</p><p>我也試著在學校與同學用德文說話，並且請它們教我一些東西的德文，說來奇怪，經過了這麼多年，我甚至還記得某些單字是在什麼場景下學習的，記得一堂美術課，我把所有鉛筆盒裡面的東西都問完了，有些甚至這些年來從沒再說過的單字，也在我腦海裡記得非常清楚。</p><p><img src="https://i.imgur.com/QoccluQ.png"></p><p>在轟家中，我的家庭要求我每天晚上八點準時在客廳集合，和他們一起看<a href="https://www.tagesschau.de/">德國第一電視台</a>的15分鐘本日重要的新聞，並有時邀請我晚上和它們一起看德國電影，但是當一個人疲憊的時候，耳裡聽到又是聽不懂的聲音時，常常就會不小心睡著，可是沒事，即便在睡覺的時候，還是在學德文呢!</p><p>![](<a href="https://i.imgur.com/TikWFc7.png">https://i.imgur.com/TikWFc7.png</a> &#x3D;500x300)</p><h1 id="一個似母語的外語-—-昇華"><a href="#一個似母語的外語-—-昇華" class="headerlink" title="一個似母語的外語 — 昇華"></a>一個似母語的外語 — 昇華</h1><p>在經過一個多月的洗禮後，我的生活幾乎只剩下德文，英文的解釋再也不需要了，然而語言學習之路並非如此的簡單，要如何講話才能像一個道地的德國人呢?</p><p>我很慶幸的，我在學習語言的過程中沒有受到太多制式語言課的束縛，而是有自己去探索了解語言的空間，我從聽-&gt;說-&gt;讀-&gt;寫，一步一學起，就好像在學母語一樣，用耳朵聽，用嘴巴說，用腦袋猜，最重要的無非就是<strong>想表達自己的想法</strong>，並且在環境的驅使下，慢慢累積自己的語言能力。</p><p>在學習語言很重要的一點<strong>模仿以及勇敢地說</strong>，語言很重要的一點就是溝通與表達，千萬不要害怕自己會說錯，就連很多德國人自己都會在講話的時候用錯文法，更何況外國人，在聊天時，學他們的口語用詞，它們也會覺得很有親切感，如果真的沒有勇氣，那就喝喝酒壯膽吧!很有效! 慢慢的你會越來越會說，越來越像在地人的口音。</p><p>此外，<strong>聯想的學習方式</strong>也是很重要的，如果你今天不知道一個東西怎麼說，你要試著用你會的文字來表達你所要說的東西，比如說，你不會說碗裡的蘋果，如果你只知道蘋果而不知道碗的單字的話，試著用蘋果來描述且引導別人告訴你，碗要怎麼說，此時，你不但學習到了碗這個新的詞彙，還有複習了蘋果，更重要的是你學會了要怎麼表達並連接了你想表達的東西們，當然在學習抽象的事情上面，這也是很重要的，是一個同時可以增強你的記憶且學習新的東西的，一舉兩得的好方法，並且可以加強你用<strong>外語思考的能力</strong>。</p><p><img src="https://i.imgur.com/IoeUlRn.png"></p><p>還有一點是對<strong>語言的感覺</strong>，上面我分享了很多我學習語言培養語感的方式，像用小單字卡、看童書、聽童話故事、多說話、多模仿，不外乎就是增加你對這個語言的接觸與培養感情，此外，<strong>語言與文化是相輔相成的</strong>，在學習語言的同時，若能夠搭配著文化一起了解，將可以加深你的印象。要學習好一個語言的不二法門還是時間，這些小方法，只是些能幫助你學習更有效率的方式。</p><h1 id="學會一個外語到底能幹嘛-—-心得"><a href="#學會一個外語到底能幹嘛-—-心得" class="headerlink" title="學會一個外語到底能幹嘛 — 心得"></a>學會一個外語到底能幹嘛 — 心得</h1><p>對於我而言，語言不是一個工具，不是一個技能，他是一個人和人之間溝通與了解的橋樑，<strong>文化語言是緊緊相連的</strong>，很多人花了很多時間學了一的語言，但是還是始終沒有使用它的勇氣;或者他們即便了解這個語言，卻不知道要怎麼和當地人溝通起，或跟不上他們說話的步調與節奏。唯一的方法，只有放開自己去接受不同的文化，走出自己的舒適圈，時常站在不同的角度去思考，並且願意接受不同的想法，不論優點或缺點。語言可以帶你進入一個新的文化，並且帶著文化出來，跟著你每個走過的足跡，它是一個能帶你更了解別人，同時也更了解自己的一個橋樑。</p>]]></content>
    
    
    <summary type="html">為什麼我要學一個第二外語? 	學習語言的技巧與方法到底有什麼呢?</summary>
    
    
    
    
    <category term="Germany" scheme="https://h123a456rr789y.github.io/tags/Germany/"/>
    
    <category term="Language Learning" scheme="https://h123a456rr789y.github.io/tags/Language-Learning/"/>
    
  </entry>
  
  <entry>
    <title>Kai Fu Lee</title>
    <link href="https://h123a456rr789y.github.io/2020/03/29/Kai-Fu-Lee/"/>
    <id>https://h123a456rr789y.github.io/2020/03/29/Kai-Fu-Lee/</id>
    <published>2020-03-29T15:15:53.000Z</published>
    <updated>2022-08-11T10:03:00.890Z</updated>
    
    <content type="html"><![CDATA[<p>Kai Fu Lee, ein taiwanischer Informatiker, wurde am 3. Dezember 1961 in Taipeh geboren. Er ist nicht nur ein informatik Wissenschaftler, sodern auch ein erfolgreicher Unternehmer und ein Autor. Lee hat seinem Doktorarbeit über das erste Spracherkenungssystem in der Carnegie Mellon Universität absoviert. Danach hat Lee als Manager für Apple, Microsoft und Google gearbeitet. </p><p>![](<a href="https://i.imgur.com/lzDFXCv.png">https://i.imgur.com/lzDFXCv.png</a> &#x3D;400x300)</p><p>Von 1988 bis 2000, war er an der Führungsposition von Microsoft Research Asia. Ab 2005 war er zum Präsodenten von Google China befördert worden. Woxuewang, eine Lernwebseite, wurde von ihm gegründet, um die jungen Chinesen in Bildung und Karrier zu unterstützen. Außerdem schreibt er Artikel und Bücher über künstliche Intelligenz und über seiner Lebensanschauung.</p><p><img src="https://i.imgur.com/da0aVy7.jpg"></p><p>Sein „Zehn Briefe an den chinesischen Student“ haben sich im Internet verbreitet. Im Jahr 2013, wurde er mit Kerbs diagnostiziert und hat seine Arbeit für 17 Monate aufgehört. 2015 wurde er wieder gesund und ist weiterhin in seiner Arbeit engagiert. Als Inbegriff des Forschers und Pionier der Künstlichen Intelligenz, hat er sehr viel Mühe in die neue Generation gesteckt, damit die Menschen und die Künstliche Intelligenz zusammen in der Zukunft gut weiter entwickt werden.</p><p>![](<a href="https://i.imgur.com/FOoTbfZ.png">https://i.imgur.com/FOoTbfZ.png</a> &#x3D;1200x450)</p>]]></content>
    
    
    <summary type="html">Ein berühmter Informatiker Taiwans</summary>
    
    
    
    
    <category term="Deutsche Artikel" scheme="https://h123a456rr789y.github.io/tags/Deutsche-Artikel/"/>
    
  </entry>
  
  <entry>
    <title>Die chinesisische Sprache</title>
    <link href="https://h123a456rr789y.github.io/2020/03/29/Die-chinesisische-Sprache/"/>
    <id>https://h123a456rr789y.github.io/2020/03/29/Die-chinesisische-Sprache/</id>
    <published>2020-03-29T14:46:52.000Z</published>
    <updated>2022-08-11T10:03:00.890Z</updated>
    
    <content type="html"><![CDATA[<p>Die chinesischen Sprachen sind Tonsprachen und entstammen aus der sinotibetischen Sprachfamilie. Heuzutage wurden die chinesischen Sprache von ca.1,5 Millarden Menschen gesprochen, von denen die meisten in China und Taiwan leben. Außerdem ist Mandarin die Hauptsprache mit der größten Anzahl (ca.8,89 Millionnen) an Sprechern von allen chinesischen Sprachen und ist auch die Sprache mit den weltweit meisten Muttersprachlern.</p><p>![](<a href="https://i.imgur.com/sT8wvvU.png">https://i.imgur.com/sT8wvvU.png</a> &#x3D;200x200)</p><p>Es gibt hauptsächlich drei chinesische Dialekte, darunter der Mandarin-Dialekt bzw. Hochchinesisch aus Perking, nordöstliche Dialekt und südliche Dialekt. Jedoch können die Sprecher von verschiedenen Dialekten sich untereinander nicht verständigen, aber die Wörter werden in den gleichen chinesischen Schriftzeichen geschrieben. Es gibt insgesamt über 100,000 Schriftzeichen, von denen der überwiegende Teil jedoch heute selten verwenden wird.</p><p>![](<a href="https://i.imgur.com/oRTNbgE.png">https://i.imgur.com/oRTNbgE.png</a> &#x3D;400x300)</p><p>Für den alltäglichen Bedarf ist die Kenntnis von 3000 bis 5000 Schriftzeichen ausreichend, um die Zeitungen und die Bücher zu nachvollziehen. In China wird Manderin mit Pīnyīn und vereinfachen Chinesisch verwendet und in Taiwan wird es mit Zhùyīn und traditionellen Chinesisch verwenden. Das älteste Schriftzeichen ist vermutlich vor etwa 3000 Jahren erfunden worden und wurde auf Orakelknochen gezeichnet. Zusätzlich bestehen die Schriftzeichen hauptsächlich aus sechs Kategorien, worunter Piktogramme, Symbole, Ideogramme, Phonogramme, Entlehnungen und Synonyme. Die überwiegende Mehrheit sind Phonogramme mit dem Anteil von 90 Prozent.</p><p>![](<a href="https://i.imgur.com/z6gGNSW.png">https://i.imgur.com/z6gGNSW.png</a> &#x3D;400x300)</p>]]></content>
    
    
    <summary type="html">Die Vorstellung von der chinesischen Sprache</summary>
    
    
    
    
    <category term="Deutsche Artikel" scheme="https://h123a456rr789y.github.io/tags/Deutsche-Artikel/"/>
    
  </entry>
  
  <entry>
    <title>Das chinesische Neujahrsfest</title>
    <link href="https://h123a456rr789y.github.io/2020/03/29/Das-chinesische-Neujahrsfest/"/>
    <id>https://h123a456rr789y.github.io/2020/03/29/Das-chinesische-Neujahrsfest/</id>
    <published>2020-03-29T14:29:07.000Z</published>
    <updated>2022-08-11T10:03:00.890Z</updated>
    
    <content type="html"><![CDATA[<p>Das chinesische Neujahrsfest ist das wichtigeste Fest in Taiwan. Es findest jeweils an unterschiedlichen Tagen statt, denn das chinesische Neujahr hängt von dem Mondkalender ab. Jedes Jahr bekommt man Ferien von einem Tag vor Silvester bis zum 5.1. von des Monkalenders. Das chinesiches Neujahr ist ein Clan- und Familiefest, weshalb egal wo die Familiemitglieder wohnen, treffen alle durch das Fest zusammen. </p><p><img src="https://i.imgur.com/teHuzTl.png"></p><p>Es gibt’s viele Traditionen, die man im Neujahr machen. Am Silvester kommt die Familie zu einem reichhaltingen Essen, traditionell mit Fisch, der wird jedoch nicht vollständig gegessen. Weil das Wort ein Homophon für „Überfluss“ ist, was auch „Wohlstand“ für das kommende Jahr bedeutet. Nach dem Essen, wird die Familie zusammen spielen, Fernsehen schauen oder sich mit den Leuten unterhalten. Anschließend, werden die Kinder den roten Umschlag mit Geld von den Verwandten bekommen. </p><p><img src="https://i.imgur.com/prliZQs.png"></p><p>Außerdem, viele Leute spielen gerne Mah-Juongg um wenig Geld und auch Lotto, um Glück und Spaß in das neue Jahr mitzubringen. Im Neujahr verreist man viel mit der Familie und den Freunden zusammen, sodass die Innenstädte immer voll mit Menschen sind. Das chinesische Neujahrsfest ist ein großartiges Fest, dass welches die Zusammenkunft der Familie und immer eng und stark verbindet.<br><img src="https://i.imgur.com/MI5fHrw.png"></p>]]></content>
    
    
    <summary type="html">Eine wichtigste Ereingnis in Taiwan</summary>
    
    
    
    
    <category term="Deutsche Artikel" scheme="https://h123a456rr789y.github.io/tags/Deutsche-Artikel/"/>
    
  </entry>
  
</feed>
